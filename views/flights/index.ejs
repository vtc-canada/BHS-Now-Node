
<!-- This is the template for each gantt row -->
<script type="text/template" id="ganttrows-template">
    {{ if (deleted){ return; } }}
    <div class="span12 ganttrow">
        
        <div class="clockblock"><div class="gantblock" style="border-top:none;"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>

		{{ for(var i = 0; i<flights.length;i++){ }}
	        {{ var selectedDate = $('#flightdatepicker').data('datetimepicker').getLocalDate(); selectedDate.setHours(0,0,0,0);    var yesterday  = new Date(selectedDate); yesterday.setDate(selectedDate.getDate()-1); var yesterday9pm = new Date(yesterday).setHours(21); var tomorrow = new Date(selectedDate); tomorrow.setDate(selectedDate.getDate()+1); var tomorrow3am = new Date(tomorrow).setHours(3); var departuredatetime = dateFromISO(flights[i].departure_time);  var arrivaldatetime = dateFromISO(flights[i].arrival_time);      }}
	        {{ tatemp = dateFromISO(flights[i].departure_time) }}
	        {{ tatemp.toString() }}
	        {{ departuredatetime }}
	        {{ arrivaldatetime }}
	        {{ var lefttemp = 100*(departuredatetime.getTime() - yesterday9pm)/(tomorrow3am- yesterday9pm); }}
	        {{ var widthtemp = 100*(arrivaldatetime.getTime() - departuredatetime.getTime())/(tomorrow3am- yesterday9pm); }}
	        {{ var prewidthtemp = widthtemp; }}
	        {{ if(lefttemp < 0){ widthtemp = widthtemp + lefttemp; lefttemp =0; } }}
	        {{ if(lefttemp + widthtemp > 100){ widthtemp = 100-lefttemp; } }}
	
	        <a class="progress ganntbar"  leg_id="{{= flights[i].id}}" flight_id="{{= flights[i].flight_id }}"  style="top:7px; left:{{= lefttemp }}%; width:{{= widthtemp }}%; {{ if(lefttemp==0){ }} border-radius:0px 4px 4px 0px; {{ }else if(lefttemp+prewidthtemp>100){ }} border-radius:4px 0px 0px 4px; {{ } }}">
	
	            <div leg_id="{{= flights[i].id}}" flight_id="{{= flights[i].flight_id }}" class="bar progress-bar-success gantt-flightname-div" style="width:{{= 100 }}%;">{{= flights[i].IATA_2_digit_ID+' '+flights[i].flight_number }}</div>
	
	        </a>
        {{ } }}
    </div>
</script>

<script type="text/template" id="contacts-search-row-template">
	<div class="contacts-search-row row-fluid" contact_id="{{=contact_id}}">
		<div class="span1 contacts-search-row-id"></div> <!--{{=contact_id}}-->
		<div class="span3 contacts-search-row-name">{{=contact_name}}</div>
		<div class="span3 contacts-search-row-company">{{=company}}</div>
	</div>
</script>

<script type="text/template" id="staticmap-template">
	{{ var flightPathString = '',markerCount=1; }}
	{{for(var i=0;i<paths.length;i++){ }}
		{{ if(paths[i].origin&&paths[i].destination){ }}
			{{ flightPathString+= (i>0?'&':'') + 'path=geodesic:true|color:0x0000ff|weight:5|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude + '|'+ paths[i].destination.latitude + ',' + paths[i].destination.longitude;  }}
			{{ flightPathString+= '&markers=color:0x0000ff|label:'+markerCount+'|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude; markerCount++; }}
			{{ flightPathString+= '&markers=color:0x0000ff|label:'+markerCount+'|' + paths[i].destination.latitude + ',' + paths[i].destination.longitude; markerCount++; }}
			
		{{ }else if(paths.length==1&&paths[i].origin){ }}
			{{ flightPathString ='center='+paths[i].origin.latitude+','+paths[i].origin.longitude+'&zoom=5'; }}
			{{ flightPathString+= '&markers=color:0x0000ff|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude; markerCount++; }}
		{{ }else if(paths.length==1&&paths[i].destination){ }}
			{{ flightPathString ='center='+paths[i].destination.latitude+','+paths[i].destination.longitude+'&zoom=5';  }}
			{{ flightPathString+= '&markers=color:0x0000ff|' + paths[i].destination.latitude + ',' + paths[i].destination.longitude; markerCount++; }}
		{{ } }}
	{{ } }}
	{{ if(flightPathString==''){ }}
		{{ flightPathString ='center=Canada&zoom=3';  }}
	{{ } }}
	
	<img src="//maps.googleapis.com/maps/api/staticmap?{{=flightPathString}}&size=320x240" alt=""/>
</script>


<script type="text/template" id="flight_selector_details">
	<div class="row-fluid flight-selector-details-wrapper page-controls-wrapper">
	
        <div class="row-fluid" id="reportheader">
        	<span style="padding-left:10px;">Users</span>
        	<select id="leg_combobox" class="pull-right" style="margin-right:10px;font-weight: 400; float:right;" >
	    	{{ for(var flightindex=0;flightindex<flights.length;flightindex++){ }}
	    		{{ if(typeof(flights[flightindex].is_deleted)=='undefined'){ }}
	    		<option value="{{=flights[flightindex].id}}"  {{ if(typeof(flights[flightindex].tempId)!='undefined'){ }}templeg="{{= flights[flightindex].tempId }}"{{ } }}  {{ if((selectedLeg!=null&&selectedLeg==flights[flightindex].id )|| (typeof(flights[flightindex].tempId)!='undefined'&&selectedTempLeg==flights[flightindex].tempId)){ }}selected="selected"{{ } }}>{{= (flights[flightindex].origin_airport_code==null?'':getAirportById(flights[flightindex].origin_airport_code).IATAFAA) + ' to ' + (flights[flightindex].destination_airport_code==null?'':getAirportById(flights[flightindex].destination_airport_code).IATAFAA)}}</option>
	    		{{ } }}
	    	{{ } }}
			</select>
        </div>
        <div class="row-fluid key-indicaters-frame" id="iframediv">
            <div class="row-fluid">
            	<div class="span5">
					<div class="row-fluid">
						<div class="span3">Distance:</div>
						<div class="span9" id="edit_flight_stats_distance">{{=flight.id}}</div>
					</div>
					<div class="row-fluid">
						<div class="span3">Duration:</div>
						<div class="span9" id="edit_flight_stats_duration">{{=flight.tempId}}</div>
					</div>
            	</div>
            </div>
        </div>
	
	
	</div>


</script>


<script type="text/template" id="editflight-template">
	
	
	
	<div class="row-fluid collapse in" id="preview_flight_summary">
		<div class="span3" id="editmap_preview_wrapper">
		
		<!--<img src="//maps.googleapis.com/maps/api/staticmap?path=geodesic:true|color:0x0000ff|weight:5|51.1139,-114.02|47.6186,-52.7519&size=320x240" alt=""/>-->
		</div>
		<div class="span8" id="flight_selector_details_wrapper">
			
		</div>
	</div>
	
	<div class="row-fluid" style="display:none;">
	
	
	
	</div>
		
	<div class="tabbable"> <!-- Only required for left/right tabs -->
	  <ul class="nav nav-tabs" style="margin-bottom:0px;">
	    <li {{if(activeTab == null||activeTab=='#tab1'){ }}class="active"{{ } }}><a href="#tab1" data-toggle="tab">General</a></li>
	    <li {{if(activeTab=='#tab2'){ }}class="active"{{ } }}><a href="#tab2" data-toggle="tab">Route Details</a></li>
	    <li {{if(activeTab=='#tab3'){ }}class="active"{{ } }}><a href="#tab3" data-toggle="tab">Assigned Companies</a></li>
	    <li {{if(activeTab=='#tab4'){ }}class="active"{{ } }}><a href="#tab4" data-toggle="tab">Passengers</a></li>
	  </ul>
	  <div class="tab-content">
	    <div class="tab-pane {{if(activeTab == null||activeTab=='#tab1'){ }}active{{ } }}" id="tab1">
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_flight_number">Flight Number:</label></div>
		    	<div class="span4"><input type="text" id="edit_flight_number" model-attribute="flight_number" value="{{=flights[0].flight_number}}"/></div>
	    	</div>
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_airline">Airline:</label></div>
		    	<div class="span4">
		    	<select id="edit_airline">
	      			<option IATA_code="" IATA_2_digit_ID="" value="">Choose Airline</option>
		    		{{for(var i=0;i<airlines.length;i++){ }}
		    			<option IATA_code="{{=airlines[i].IATA_code}}" IATA_2_digit_ID="{{=airlines[i].IATA_2_digit_ID}}" value="{{=airlines[i].id}}" {{if(airlines[i].id == flights[0].airline){ }}selected="selected"{{ } }}>{{=airlines[i].IATA_2_digit_ID}} - {{=airlines[i].carrier}}</option>
		    		{{ } }}
		    	</select>
		    	</div>
	    	</div>
	    </div>
	    
	    <div class="tab-pane  {{if(activeTab=='#tab2'){ }}active{{ } }}" id="tab2">
	    	<div class="row-fluid">
	    		<div class="span6">
	    			Route Details
	    		</div>
	    		<div class="span6">
	    			<button class="btn btn-primary pull-right" id="add_flight_leg">Add Flight Leg</button>
	    		</div>
	    		
	    	</div>
	    	
	    	
	    	{{ for(var flightindex=0;flightindex<flights.length;flightindex++){ }}
	    	<div class="flight-wrapper {{ if(typeof(flights[flightindex].is_deleted)!='undefined'&&flights[flightindex].is_deleted){ }}is_deleted{{ } }}" leg="{{= flights[flightindex].id }}" {{ if(typeof(flights[flightindex].tempId)!='undefined'){ }}templeg="{{= flights[flightindex].tempId }}"{{ } }}>
		    	<div class="row-fluid">
		    		<div class="span6">
		    			<div class="row-fluid">
		    				<div class="span3 leg-map">
		    				
		    				</div>
		    			</div>
		    		 leg {{= flights[flightindex].id }}
		    		</div>
		    	
		    		<div class="span6">
		    			<div class="row-fluid">
				    		<div class="span6">
					    		<div class="row-fluid flight-leg-title">Origin:</div>
								
								
								<div class="row-fluid">
									<div class="span6">
						    			<label for="edit_origin_airport">Airport:</label>
						    		</div>
						    		<div class="span6 input-append ">
							    		<select class="edit_origin_airport flex-input flex-input-width" leg="{{= flights[flightindex].id }}">
							      			<option IATAFAA="" ICAO="" value="">Choose Origin</option>
								    		{{for(var i=0;i<airports.length;i++){ }}
								    			<option airport_code="{{=airports[i].id}}" timezone="{{=airports[i].timezone}}" latitude="{{=airports[i].latitude}}" longitude="{{=airports[i].longitude}}" IATAFAA="{{=airports[i].IATAFAA}}" ICAO="{{=airports[i].ICAO}}" value="{{=airports[i].id}}" {{if(airports[i].id == flights[flightindex].origin_airport_code){ }}selected="selected"{{ } }}>{{=airports[i].IATAFAA}} - {{=airports[i].name}}</option>
								    		{{ } }}
								    	</select>
						    		</div>
								</div>
								
								<div class="row-fluid">
						    		<div class="span6">
						    			<label for="edit_flight_origin_datepicker">Scheduled Departure:<span class="origin-timezone"></span></label>
						    		</div>
									<div leg="{{= flights[flightindex].id }}" class="edit_flight_origin_datepicker input-append span6 datepicker-wrapper-padder">
									
						                <input data-format="yyyy-MM-dd" class="isn-datepicker flex-input" type="text" value="">
						                <span class="add-on">
						                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
						                </span>
						            </div>
						    	</div>
							</div>
							<div class="span6">
								<div class="row-fluid">
									<div class="row-fluid flight-leg-title">Destination:</div>
									<div class="row-fluid">
										<div class="span6">
							    			<label for="edit_destination_airport">Airport:</label>
							    		</div>
							    		<div class="span6 input-append">
								      		<select class="edit_destination_airport flex-input flex-input-width" leg="{{= flights[flightindex].id }}">
								      			<option IATAFAA="" ICAO="" value="">Choose Destination</option>
									    		{{for(var i=0;i<airports.length;i++){ }}
									    			<option airport_code="{{=airports[i].id}}" timezone="{{=airports[i].timezone}}" latitude="{{=airports[i].latitude}}" longitude="{{=airports[i].longitude}}" IATAFAA="{{=airports[i].IATAFAA}}" ICAO="{{=airports[i].ICAO}}" value="{{=airports[i].id}}" {{if(airports[i].id == flights[flightindex].destination_airport_code){ }}selected="selected"{{ } }}>{{=airports[i].IATAFAA}} - {{=airports[i].name}}</option>
									    		{{ } }}
									    	</select>
							    		</div>
									</div>
									
									<div class="row-fluid">
							    		<div class="span6">
							    			<label for="edit_flight_destination_datepicker">Scheduled Arrival:<span class="destination-timezone"></span></label>
							    		</div>
										<div leg="{{= flights[flightindex].id }}" class="edit_flight_destination_datepicker input-append span6 datepicker-wrapper-padder">
							                <input data-format="yyyy-MM-dd" class="isn-datepicker flex-input" type="text" value="">
							                <span class="add-on">
							                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
							                </span>
							            </div>
							    	</div>
								</div>	
							</div>
						</div>
					</div>	
				</div>
				{{ if(flightindex>0){ }}
				<div class="row-fluid">
					<button class="btn btn-danger pull-right delete_flight_leg" leg="{{= flights[flightindex].id }}" {{ if(typeof(flights[flightindex].tempId)!='undefined'){ }}templeg="{{= flights[flightindex].tempId }}"{{ } }}>Delete Flight Leg</button>
				</div>
				{{ } }}
			</div>
	    	{{ } }}
	    	
	    	
			
			
			
	    
	    </div>
	    <div class="tab-pane  {{if(activeTab=='#tab3'){ }}active{{ } }}" id="tab3">
	    
	    	{{ for(var i=0;i<company_mappings.length;i++){ }}
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_flight_company_mapping{{=company_mappings[i].id}}">{{=company_mappings[i].name}}</label></div>
		    	<div class="span4"><input type="checkbox" id="edit_flight_company_mapping{{=company_mappings[i].id}}" class="assign-company-checkbox" company_id="{{=company_mappings[i].id}}" {{if(company_mappings[i].assigned){ }}checked="checked"{{ } }} /></div>
	    	</div>
	    	{{ } }}
	    	
	    </div>
	    
	    <div class="tab-pane {{if(activeTab=='#tab4'){ }}active{{ } }}" id="tab4">
	    	
	    	<div class="row-fluid isnajaxfield-parent">
              <!-- <div class="row">
                   <div class="span3 report-control-left-label"  style="min-height: 30px;padding-top: 5px;"><label for="search_contact"><%= __('Passenger Details') %></label></div>
                   <div class="span8 report-control-right-control">
                   </div>
               </div>-->
               <div class="row-fluid" style="position:relative">
               
	               <div class="row-fluid search-contact-ajax-wrapper">
	               		<div class="inner-search-contact-wrapper span3 offset1">
	               			<input type="text" id="search_contact" value="" placeholder="Add Passenger">
	               		</div>
	               		<div class="span3">
	               			<input type="checkbox" id="add_all_legs" checked="checked">
	               		</div>
	               </div>
	               <div class="btn btn-success pull-right" style="position:absolute; right:4px; top:4px">Import Excel</div>
               </div>
               <div id="search_contact_results" ></div>
               
           </div>
           
	    	
	    	
	    	{{ for(var flightindex=0;flightindex<flights.length;flightindex++){ }}
	    	<div class="row-fluid passengers-datatable-wrapper {{ if((selectedLeg!=null&&selectedLeg!=flights[flightindex].id )||(selectedTempLeg !=null && selectedTempLeg!=flights[flightindex].tempId)){ }}datatable-hidden{{ } }}"  leg="{{= flights[flightindex].id }}" {{ if(typeof(flights[flightindex].tempId)!='undefined'){ }}templeg="{{= flights[flightindex].tempId }}"{{ } }}   >
		    	<table id="passengers_{{=flights[flightindex].id}}" class="display fms-table" style="" cellspacing="0" width="100%">
			        <thead>
			            <tr>
			            	<th>Id<i class="icon-caret-down"></i><i class="icon-caret-up"></i></th>
			                <th>Passenger</th>
			                <th>Checked In</th>
			                <th></th>
			                <th></th>
			            </tr>
			        </thead>
			    </table>
		    </div>
	    	{{ } }}
	    </div>
	  </div>
	</div>
	
	
	
	<div data-toggle="collapse" data-target="#preview_flight_summary" id="preview_flight_summary_collapse_handle">
		<i class="icon-collapse-alt icon-2x"></i>
	</div>
</script>

<div class="row-fluid ">
    <div class="row-fluid">
        <div class="top-page-title span5 offset1"><%= __('Schedule Parameters')%>:</div>
    </div>
    <div class="row ">
        <div class="span2 offset2">
            <div class="row">
                <label id="timepickerlabel" style="color: #717171;" for="timepickerlabel"><%= __('Schedule Date')%>:</label>
            </div>
        </div>
        <div class="span3 input-datepicker-smallpad">
            <div id="flightdatepicker" class="input-append span6 ">
                <input data-format="yyyy-MM-dd" type="text" value="">
                <span class="add-on">
                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
                </span>
            </div>
        </div>
    </div>
    <!--<div class="row">
        <div class="span2 offset2"></div>
        <div class="span3 flight-datepicker-parent" style="position:relative;">
    
    </div>-->
</div>

<!-- Gantt table section -->
<div class="row-fluid" style="margin-top:20px;">
    <div class="span10 offset1 page-controls-wrapper">
        <div class="row-fluid" id="reportheader"><span id="report-header-date" style="padding-left:10px;"><%= __('Select Date')%></span>
            <div class="span4 pull-right">
                <div class="row-fluid">
                    <button id="save_flights" class="btn-create-flight-gantt btn btn-primary" disabled="disabled"><%= __('Save')%></button>
                    <button id="add_flight" class="btn-add-flight-gantt btn btn-primary" ><%= __('Create')%></button>
					<div style="margin-right: 10px; color: rgb(153, 0, 0); font-weight: 400; display: none;" class="pull-right save_pull" id="changes_pending">Changes Pending. &nbsp;</div>
                </div>
            </div>
        </div>
        <div class="row-fluid" id="iframediv" >
            <div class="row-fluid">
                <div class="span3 search-gant-wrapper">
                    <input type="text"  placeholder="<%= __('Filter By')%>..." id="searchgantt" />
                </div>
            </div>

            <div class="gantt-outer-wrapper">
                <div id="ganttwrapper" class="row-fluid">
                    <div id="gantttimescale" class="span12">

                        <div class="clockblock"><div class="timeblock">22:00</div></div>
                        <div class="clockblock"><div class="timeblock">23:00</div></div>
                        <div class="clockblock"><div class="timeblock">00:00</div></div>
                        <div class="clockblock"><div class="timeblock">01:00</div></div>
                        <div class="clockblock"><div class="timeblock">02:00</div></div>
                        <div class="clockblock"><div class="timeblock">03:00</div></div>
                        <div class="clockblock"><div class="timeblock">04:00</div></div>
                        <div class="clockblock"><div class="timeblock">05:00</div></div>
                        <div class="clockblock"><div class="timeblock">06:00</div></div>
                        <div class="clockblock"><div class="timeblock">07:00</div></div>
                        <div class="clockblock"><div class="timeblock">08:00</div></div>
                        <div class="clockblock"><div class="timeblock">09:00</div></div>
                        <div class="clockblock"><div class="timeblock">10:00</div></div>
                        <div class="clockblock"><div class="timeblock">11:00</div></div>
                        <div class="clockblock"><div class="timeblock">12:00</div></div>
                        <div class="clockblock"><div class="timeblock">13:00</div></div>
                        <div class="clockblock"><div class="timeblock">14:00</div></div>
                        <div class="clockblock"><div class="timeblock">15:00</div> </div>
                        <div class="clockblock"><div class="timeblock">16:00</div></div>
                        <div class="clockblock"><div class="timeblock">17:00</div></div>
                        <div class="clockblock"><div class="timeblock">18:00</div></div>
                        <div class="clockblock"><div class="timeblock">19:00</div></div>
                        <div class="clockblock"><div class="timeblock">20:00</div></div>
                        <div class="clockblock"><div class="timeblock">21:00</div></div>
                        <div class="clockblock"><div class="timeblock">22:00</div></div>
                        <div class="clockblock"><div class="timeblock">23:00</div></div>
                        <div class="clockblock"><div class="timeblock">00:00</div></div>
                        <div class="clockblock"><div class="timeblock">01:00</div></div>
                        <div class="clockblock"><div class="timeblock">02:00</div></div>
                        <div class="clockblock"><div class="timeblock">03:00</div></div>
                    </div>

                    <div id="ganttrows" class="row-fluid">

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="flightModal" class="modal modal-lg hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
        <h3 id="myModalFlightLabel"><%= __('Create Flight') %></h3>
    </div>
    <div class="modal-body modal-body-overflow" id="edit_flight_body">
        
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" id="flightchangecancel" aria-hidden="true"><%= __('FormCancel') %></button>
        <button class="btn btn-danger" id="delete_edit_flight"><%= __('FormDelete') %></button>
        <button class="btn btn-primary" id="save_edit_flight"><%= __('FormSave') %></button>
    </div>
</div>

<div id="boardingPassModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
        <h3 id="myModalBoardingPassLabel"><%= __('Boarding Pass') %></h3>
    </div>
    <div class="modal-body modal-body-overflow" id="boarding_pass_body">
        <div id="boarding_pass_details"></div>
        <div id="boarding_pass_manifest_id" class="pull-right"></div>
        <img id="board_pass_js_barcode">
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" id="boardingpasscancel" aria-hidden="true"><%= __('Close') %></button>
        <button class="btn btn-primary" id="print_boarding_pass"><%= __('Print') %></button>
    </div>
</div>

<script type="text/javascript">

	var airlines = <%-JSON.stringify(airlines)%>;
	var airports = <%-JSON.stringify(airports)%>;

	function getAirportById(airportId){
		for(var i=0;i<airports.length;i++){
			if(airports[i].id == airportId){
				return airports[i];
			}
		}
	
	}
    var gantt;       // This is the collection of rows/flights
	var editFlightView = null; // This Backbone View wraps creating/editing new flights.

	var activeTab = null;
	var selectedLeg = null;
	var selectedTempLeg = null;
		
    $(function(){
    	socket.on('connect',initialize);
    
    });
    function initialize(){
    
    	socket.get('flights/watchCompany',function(response){
    		socket.on('gantt',function(){
    			gantt.fetch();
    		});
    	});
        // binds datetimepicker to the main schedule date input
        // when this date is changed, we fetch the new flights from serverside
        // this triggers render().
        $('#flightdatepicker').initDateTimePicker({ 
	        language:'<%=req.session.user.locale%>', 
	        format:'yyyy-MM-dd',
	        pickTime: false,
	        pick12HourFormat: false,
	        widgetAttribute:'select_flight_date',
	        changeDate:function(e){
	       		gantt.fetch();
	        }
		});
		$('#flightdatepicker').data('datetimepicker').setLocalDate(new Date());
   		
		
		
		$('#add_flight').click(function(){
		
		// TODO = check if deleted is added ( false)
		
			//var newFlightId = 
			var newFlight = {id:null,tempId : Math.floor(Math.random()*99999), 
			flights :[
			{
				id:null, 
				tempId : Math.floor(Math.random()*99999),
        		airline : null,
        		arrival_time : null,
        		company_seats : [],  //wierd
        		cur_airplanes_id : 0,
        		departure_time : new Date(),
        		destination_airport_code:null,
        		destination_timezone : null,
        		flight_id : null,
        		flight_number:null,
        		origin_airport_code:null,
        		origin_timezone:null
			} 
			]};
			//if(editFlightView!=null){
			//	editFlightView.remove();
			//}
			//editFlightView.model.clear();
			editFlightView.model.set(newFlight);
			selectedLeg = null;
			selectedTempLeg = null;
			editFlightView.render();
			$('#myModalFlightLabel').html('<%=__('Create Flight')%>');
			$('#flightModal').modal('show');
			$('#flightModal').attr('flight_id',null);
	        
		});
		
	        		
		$('#boardingPassModal').modal({show:false}); //backdrop:'static',
		$('#board_pass_js_barcode').JsBarcode('1823902140121');
		
		$('#flightModal').modal({backdrop:'static',show:false});
        $('#flightModal').on('shown',function(e){
        	fixModals();
        });
		$('#flightModal').on('show',function(e){
        	fixModals();
        });
		$('#flightModal').on('hide',function(e){
        	$('#flightModal').attr('flight_id','');// carefully remove flight_id if your done with the modal.
        });
        
        
		//////////////////////////////////////////////////
        //////// GANTT ///////////////////////////////////
        //////////////////////////////////////////////////
        // The gantt collection is created.
        // then ganttView.render() is called to make the graph
        // when the request for the collection is made, date parameter is passed in
        var GanttModel = Backbone.Model.extend({
        	defaults:{
        		deleted:false
    		},
            urlRoot: ''
        });

        var SailsGanttCollection = Backbone.Collection.extend({
            sailsCollection: "",
            socket: null,
            sync: function(method, model, options){
                options.date = $('#flightdatepicker input').val();
                
                var newdate = new Date($('#flightdatepicker input').val());
                
                
                var selectedDate = $('#flightdatepicker').data('datetimepicker').getLocalDate(); 
                selectedDate.setHours(0,0,0,0);
                var yesterday = new Date(selectedDate);
                yesterday.setDate(selectedDate.getDate()-1); 
                var yesterday9pm = new Date(yesterday).setHours(21); 
                var tomorrow = new Date(selectedDate); 
                tomorrow.setDate(selectedDate.getDate()+1); 
                var tomorrow3am = new Date(tomorrow).setHours(3); 

        		options.minDate = new Date(yesterday9pm);
        		options.maxDate = new Date(tomorrow3am);
                
                
                if(typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                    this.socket = socket;

                    this.socket.get(this.sailsCollection, options, _.bind(function(flighttables){
                        if(flighttables.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                        }
                        this.reset(flighttables);
                        //this.set(flighttables);
                        ganttView.render();
                    }, this));
                }
            }
        });

        var GanttCollection = SailsGanttCollection.extend({
            sailsCollection: '/flights/findFlights',
            model: GanttModel
        });

        // creates the collection, it's 'fetch'ed' later
        gantt = new GanttCollection();
		gantt.fetch();

        // this view object builds the graph on the page
        var GantView = Backbone.View.extend({
            el: '#ganttrows',
            initialize: function () {
            },
            events:{
                'click a.progress.ganntbar':'ganttClick'
            },
            ganttClick:function(event){
                //do_popover(event,false);
                this.doGanttClick($(event.target).attr('flight_id'));
                
				
            },
            doGanttClick : function(flight_id, tryHold){
            	if(typeof(this.collection.get(flight_id))=='undefined'){  // most-likely deleted.
					selectedLeg = null;
					selectedTempLeg = null;
					$('#flightModal').attr('flight_id',''); // clear flight_id flag
					$('#flightModal').modal('hide');
					return;
            	}
            	var newFlight = _.clone(this.collection.get(flight_id).toJSON());
				
				newFlight.flights = _.clone(newFlight.flights); // this clears the flights connection... **********  TODO- reconnect later maybe.. instead of re-calling database possibly.
				for(var i=0;i<newFlight.flights.length;i++){
					newFlight.flights[i] = _.clone(newFlight.flights[i]);
				}
				//if(editFlightView!=null){
				//	editFlightView.remove();
				//}
				
				//editFlightView.model.clear();
				editFlightView.model.set(newFlight);
				
				editFlightView.render();
				$('#myModalFlightLabel').html('<%=__('Flight')%> '+editFlightView.model.get('flights')[0].flight_number);
				
				if(typeof(tryHold)=='undefined'){  // if new
					selectedLeg = null;
					selectedTempLeg = null;
					$('#flightModal').modal('show'); //make new one
				}
				
				$('#flightModal').attr('flight_id',flight_id);
            },
            template: _.template($('#ganttrows-template').html()),
            render: function () {
                this.$el.html("");
                var tcollection = this.collection.sortBy(function(message){
                    return new Date(message.get('flights')[0].departure_time).getTime();
                });
                for(var i=0; i<tcollection.length; i++)
                {
                    var passsearch = true;
                    // skip out ones that do not satisfy search terms
                    var terms = $('#searchgantt').val().split(' ');

                    for(var j=0;j<terms.length;j++){
                        if(terms[j]==""){
                            continue;
                        }
                        var inflightgroup = false;
                        for(var k = 0; k < tcollection[i].get('flights').length;k++){
	                        if((getPropertybyId(ref_airline_code,'IATA_2_digit_ID',tcollection[i].get('flights')[k].airline).toString()+tcollection[i].get('flights')[k].flight_number.toString()).toLowerCase().indexOf(terms[j].toString().toLowerCase())==-1
	                                &&("mu"+tcollection[i].get('flights')[k].virtual_early_dest.toString()).indexOf(terms[j].toString().toLowerCase())==-1
	                                &&("mu"+tcollection[i].get('flights')[k].virtual_late_dest.toString()).indexOf(terms[j].toString().toLowerCase())==-1
	                                &&("mu"+tcollection[i].get('flights')[k].virtual_locked_out_dest.toString()).indexOf(terms[j].toString().toLowerCase())==-1
	                                &&("mu"+tcollection[i].get('flights')[k].virtual_on_time_dest.toString()).indexOf(terms[j].toString().toLowerCase())==-1){
	                                
	                        }else{
	                        	inflightgroup = true; //one of em should turn it true - found
	                        }                        
                        }
                        if(!inflightgroup){  // if not found at all.. then flag as passsearch = false;
                        	passsearch = false;
                        }
                    }
                    if(passsearch){
                        this.$el.append(this.template(tcollection[i].toJSON()));
                    }
                }
                $('#ganttrows .ganttrow:last-child').addClass('lastchild');
                $('#save_flights').css('display','block');
                $('#add_flight').css('display','block');
                
                
    			if($('#flightModal').css('display')!='none'&&$('#flightModal').attr('flight_id')){ //then we'll need to redraw the entire - fetching while open!!
    				this.doGanttClick($('#flightModal').attr('flight_id'),true);
    			}
    			
    			
                /*$('#save_flights').unbind();
                $('#save_flights').click(function(){
                    var params = {flight_plans:gantt.toJSON(),date:$('#flightdatepicker input').val()};

                    socket.get("/flighttable/saveFlightsByCarouselandDate", params,function(data){
                        if(data.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                            return;
                        }
                        
                        if(data.success){
                        	gantt.fetch();
                        	bannerAlert('success','<%=__('FormSuccess')%>','<%=__('All changes saved.')%>');
                        }
                    });
                });
				setChangesPending();*/
                doDate();
            }
        });
         // the view is created here, but the gantt collection is still empty.
        var ganttView = new GantView({collection: gantt});
		
		
		EditFlightModel = Backbone.Model.extend({
		});
		var editFlightModel = new EditFlightModel;
		
		var EditFlightView = Backbone.View.extend({
            el: '#edit_flight_body',
            map: '#editmap_preview_wrapper',
            initialize: function () {
            	//$('.assign-company-checkbox').unbind();
            },
            events:{
                'change .edit_origin_airport':'originPathChanged',
                'change .edit_destination_airport':'destinationPathChanged',
                'change input[model-attribute]':'changeAttribute',// ="flight_number" 
                'change #edit_airline':'airlineChanged',
                'change #edit_flight_number' : 'editFlightNumber',
                'change .assign-company-checkbox':'assignCompany',
                'click #add_pax':'addPassenger',
                'click #add_flight_leg' : 'addFlightLeg',
                'click .delete_flight_leg':'deleteFlightLeg'
            },
            deleteFlightLeg:function(event){
            	
            	var tflights = this.model.get('flights');
            	var index = getIndexById(this.model.get('flights'),parseInt($(event.currentTarget).attr('leg')),parseInt($(event.currentTarget).attr('templeg')));
            	
            	if(selectedLeg==tflights[index].id||selectedTempLeg==tflights[index].tempId){  // we deleted the one that is selected!!!
            		if(this.model.get('flights').length>0){
            			selectedLeg = this.model.get('flights')[0].id;  // select the first one..
            			selectedTempLeg = this.model.get('flights')[0].tempId; // incase it's new.
            		}
            	}
            	if(tflights[index].id==null){  // remove flight leg  (was a new one)
            		tflights.splice(index,1);
            	}else{  //TODO-update deleted flight leg
            		tflights[index].is_deleted = true;
            	}
            	
            	
            	
            	this.model.set('flights',tflights);
            	
            	//activeTab = '#tab2'; // so it knows where to redraw to
            	this.render();
            	//TODO- redraw stuff!!!
            },
            addFlightLeg : function(event){
            	//alert('here');
            	
            	// TODO-  get FlightId
            	selectedLeg = null;
            	selectedTempLeg = Math.floor(Math.random()*99999);
            	
            	this.model.get('flights').push({
            		id: null,
            		tempId : selectedTempLeg,
            		airline : this.model.get('flights')[0].airline,
            		arrival_time : null,
            		company_seats : [],  //wierd
            		cur_airplanes_id : 0,
            		departure_time : this.model.get('flights')[this.model.get('flights').length-1].arrival_time,
            		destination_airport_code:null,
            		destination_timezone : null,
            		flight_id : this.model.get('flights')[0].flight_id,
            		flight_number:this.model.get('flights')[0].flight_number,
            		origin_airport_code:this.model.get('flights')[this.model.get('flights').length-1].destination_airport_code,
            		origin_timezone:this.model.get('flights')[this.model.get('flights').length-1].destination_timezone
            	});
            	//activeTab = '#tab2'; // so it knows where to redraw to
            	this.render();
            	
            	
            },
            addPassenger:function(event){
            	alert('abcdefg');
            	
            	
        	},
            assignCompany:function(event){
            	var mappings = this.model.get('company_mappings');
            	for(var i=0;i<mappings.length;i++){
            		if(mappings[i].id == parseInt($(event.target).attr('company_id'))){
            			mappings[i].assigned = $(event.target).is(':checked')?1:0;
            			break;
            		}
            	}
            	this.model.set('company_mappings',mappings);
            },
            changeAttribute:function(event){
            	this.model.set($(event.target).attr('model-attribute'),$(event.target).val()==''?null:$(event.target).val());
            },
            airlineChanged:function(event){ // TODOA - this needs to set them on every leg
            
                var tflights = this.model.get('flights');
                for(var i=0;i<tflights.length;i++){
                	tflights[i].airline = $(event.target).val()==''?null:$(event.target).val();
                }
                
            	//this.model.set('airline',$(event.target).val()==''?null:$(event.target).val());
            },
            editFlightNumber : function(event){
            	var tflights = this.model.get('flights');
                for(var i=0;i<tflights.length;i++){
                	tflights[i].flight_number = $(event.target).val()==''?null:$(event.target).val();
                }
            },
            updateOrigin:function($location,$datetimepicker, updateModel){ // called when origin is updated
            	var timezone = parseInt($location.find('option:selected').attr('timezone'));
            	var airportcode = parseInt($location.find('option:selected').attr('airport_code'));
            	if(isNaN(timezone)){
            		timezone = null;
            		airportcode = null;
            		$location.closest('.flight-wrapper').find('.origin-timezone').html('');
            		$datetimepicker.data('datetimepicker').setValue(null);
            		$datetimepicker.data('datetimepicker').disable();
            		$datetimepicker.trigger('changeDate');
            	}else{
            		$location.closest('.flight-wrapper').find('.origin-timezone').html('<b>(Local GMT '+(timezone>0?'+':'')+timezone+')</b>');
            		$datetimepicker.data('datetimepicker').disable();
            		$datetimepicker.data('datetimepicker').enable();
            	}
            	if(updateModel){
            		var flightindex= getIndexById(this.model.get('flights'),$location.closest('.flight-wrapper').attr('leg'),$location.closest('.flight-wrapper').attr('templeg'));
                	var flight = this.model.get('flights')[flightindex];
                	
	            	flight.origin_airport_code = airportcode;
	            	flight.origin_timezone =timezone;
            	}
            },
            originPathChanged:function(event){
            	setTimeout($.proxy(function(){
	            	this.updateOrigin($(event.currentTarget).closest('.flight-wrapper').find('select.edit_origin_airport'),$(event.currentTarget).closest('.flight-wrapper').find('.edit_flight_origin_datepicker'),true);
            		//this.flightPathChanged(this.model.get('flights')[getIndexById(this.model.get('flights'),$(event.currentTarget).closest('.flight-wrapper').attr('leg'), $(event.currentTarget).closest('.flight-wrapper').attr('templeg'))],$(event.currentTarget).closest('.flight-wrapper').find('.leg-map'));
            		this.flightPathChanged($(event.currentTarget).closest('.flight-wrapper').find('select.edit_origin_airport'),$(event.currentTarget).closest('.flight-wrapper').find('select.edit_destination_airport'),$(event.currentTarget).closest('.flight-wrapper').find('.leg-map'));
            		//$(event.currentTarget).closest('.flight-wrapper').find('select.edit_origin_airport'),$(event.currentTarget).closest('.flight-wrapper').find('select.edit_destination_airport'),$(event.currentTarget).closest('.flight-wrapper').find('.leg-map'));
            		this.updateFlightSelectorPanel();
            	},this),10);
            },
            updateDestination:function($location, $datetimepicker, updateModel){
            	var timezone = parseInt($location.find('option:selected').attr('timezone'));
            	var airportcode = parseInt($location.find('option:selected').attr('airport_code'));
            	if(isNaN(timezone)){
            		timezone = null;
            		airportcode = null;
            		$location.closest('.flight-wrapper').find('.destination-timezone').html('');
            		$datetimepicker.data('datetimepicker').setValue(null);
            		$datetimepicker.data('datetimepicker').disable();
            		$datetimepicker.trigger('changeDate');
            	}else{
            		$location.closest('.flight-wrapper').find('.destination-timezone').html('<b>(Local GMT '+(timezone>0?'+':'')+timezone+')</b>');
            		$datetimepicker.data('datetimepicker').disable();
            		$datetimepicker.data('datetimepicker').enable();
            	}
            	if(updateModel){
            		var flightindex= getIndexById(this.model.get('flights'),$location.closest('.flight-wrapper').attr('leg'),$location.closest('.flight-wrapper').attr('templeg'));
                	var flight = this.model.get('flights')[flightindex];
                	
	            	flight.destination_airport_code = airportcode;
	            	flight.destination_timezone =timezone;
            	}
           		
            },
            destinationPathChanged:function(event){
            	setTimeout($.proxy(function(){
	            	this.updateDestination($(event.currentTarget).closest('.flight-wrapper').find('select.edit_destination_airport'),$(event.currentTarget).closest('.flight-wrapper').find('.edit_flight_destination_datepicker'),true);
	            	this.flightPathChanged($(event.currentTarget).closest('.flight-wrapper').find('select.edit_origin_airport'),$(event.currentTarget).closest('.flight-wrapper').find('select.edit_destination_airport'),$(event.currentTarget).closest('.flight-wrapper').find('.leg-map'));
	            	//this.flightPathChanged(this.model.get('flights')[getIndexById(this.model.get('flights'),$(event.currentTarget).closest('.flight-wrapper').attr('leg'), $(event.currentTarget).closest('.flight-wrapper').attr('templeg'))],$(event.currentTarget).closest('.flight-wrapper').find('.leg-map'));
	            	this.updateFlightSelectorPanel();
            	},this),10);
            },
            updateFlightSelectorPanel : function(){
            	this.updateFlightPanelMap();
            	this.updateFlightSelectorDetails();
            	
            },
            updateFlightSelectorDetails : function(){
            	$('#flight_selector_details_wrapper').empty();
            	var flightindex= getIndexById(this.model.get('flights'),selectedLeg,selectedTempLeg);
                var flight = this.model.get('flights')[flightindex];
            	$('#flight_selector_details_wrapper').append(this.templatedetails({flight: flight, flights: this.model.get('flights')}));
            	
            	$('select#leg_combobox').on('change',function(e){
            		var option = $('option:selected',this);
            		
	            	selectedLeg = isNaN(parseInt($(this).val()))?null:parseInt($(this).val());
	            	selectedTempLeg = isNaN(parseInt(option.attr('templeg')))?null:parseInt(option.attr('templeg'));
	            	editFlightView.updateFlightSelectorPanel();
	            	
	            	$('.passengers-datatable-wrapper').each(function(){
	            		$(this).addClass('datatable-hidden');
	            	});
	            	if(selectedLeg!=null){
	            		$('.passengers-datatable-wrapper[leg='+selectedLeg+']').removeClass('datatable-hidden');
	            	}else{
	            		$('.passengers-datatable-wrapper[templeg='+selectedTempLeg+']').removeClass('datatable-hidden');
	            	}
	            });
            	
            	
            },
            updateFlightPanelMap : function(){
            	var $map = $('#editmap_preview_wrapper');
            	$map.css('min-height',$map.height()+'px');
                $map.empty();
                
                var flightindex= getIndexById(this.model.get('flights'),selectedLeg,selectedTempLeg);
                var flight = this.model.get('flights')[flightindex];
                
                
                origin_latitude = $($('select.edit_origin_airport')[0]).find('option[airport_code='+flight.origin_airport_code+']').attr('latitude');
                origin_longitude = 	$($('select.edit_origin_airport')[0]).find('option[airport_code='+flight.origin_airport_code+']').attr('longitude');
                destination_latitude = $($('select.edit_origin_airport')[0]).find('option[airport_code='+flight.destination_airport_code+']').attr('latitude');
                destination_longitude = 	$($('select.edit_origin_airport')[0]).find('option[airport_code='+flight.destination_airport_code+']').attr('longitude');
                	
                this.paths = [{
                	origin: {latitude:origin_latitude,longitude:origin_longitude}, 
                	destination : {latitude:destination_latitude,longitude:destination_longitude} 
                	}];
                	
                $map.append(this.staticMapTemplate({paths:this.paths}));
            	setTimeout(function(){$map.css('min-height','')},1000);
            
            },
            flightPathChanged:function($origin, $destination, $map){
            
            	$map.css('min-height',$map.height()+'px');
                $map.empty();
                this.paths = [{
                	origin: ($origin.val()==''?null:{latitude:$origin.find('option:selected').attr('latitude'),longitude:$origin.find('option:selected').attr('longitude')}), 
                	destination :   ($destination.val()==''?null:{latitude:$destination.find('option:selected').attr('latitude'),longitude:$destination.find('option:selected').attr('longitude')}) 
                	}];
                	
                $map.append(this.staticMapTemplate({paths:this.paths}));
            	setTimeout(function(){$map.css('min-height','')},1000);
                //this.updateFlightStats();
            },
            updateFlightStats:function(){ // triggered by date changes.. updates duration by calculating distance..
            	return;
            	var haveOriginAndDesitnation= (this.paths.length>0&&this.paths[0].origin!=null&&this.paths[0].destination!=null);
                var haveDepartureAndArrival = this.model.get('flights')[0].departure_time!=null&&this.model.get('flights')[0].arrival_time!=null;
                
                if(haveOriginAndDesitnation){
	                $('#edit_flight_stats_distance').html(geolib.getDistance(
					    {latitude: this.paths[0].origin.latitude, longitude: this.paths[0].origin.longitude}, 
					    {latitude: this.paths[0].destination.latitude, longitude: this.paths[0].destination.longitude}
					));
                }else{
                	$('#edit_flight_stats_distance').html('');
                }
                
                if(haveDepartureAndArrival){
                	//  Updates time from arrival and departure time..
                	return 
                	var timeDiff = new Date(this.model.get('flights')[i].arrival_time).getTime()-new Date(this.model.get('flights')[i].departure_time).getTime();
                	$('#edit_flight_stats_duration').html((timeDiff<0?'<span class="fms-invalid-value">':'')+millisecondsToHoursMinutesSecondsString(timeDiff)+(timeDiff<0?'</span>':''));
                
                }else{
                	$('#edit_flight_stats_duration').html('');
                }
            },
            remove:function(){
            	socket.get('/flights/destroy',this.model.toJSON(),function(response){
            		if(response.error){
            			bannerAlert('error','<%=__('FormError')%>',response.error,$('#flightModal .modal-body'));
            		}else if(response.success){
            			bannerAlert('success','<%=__('FormSuccess')%>','<%=__('Flight Deleted')%>');
            			$('#flightModal').modal('hide');
            			//gantt.fetch();
            		}
            	});
            },
            save:function(){
            
            	/*
            	if(this.model.get('flight_number')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Flight Number')%>',$('#flightModal .modal-body'));
            	}else 
            	if(this.model.get('airline')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Airline')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('origin_airport_code')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Origin Airport')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('departure_time')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Departure Time')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('destination_airport_code')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Destination Airport')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('arrival_time')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Arrival Time')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('departure_time')>this.model.get('arrival_time')){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Arrival or Departure Time')%>',$('#flightModal .modal-body'));
            	}else{*/
	            	socket.get('/flights/save',this.model.toJSON(),function(response){
	            		if(response.error){
	            			bannerAlert('error','<%=__('FormError')%>',response.error,$('#flightModal .modal-body'));
	            		}else if(response.success){
	            			bannerAlert('success','<%=__('FormSuccess')%>','<%=__('Flight Saved')%>');
	            			$('#flightModal').modal('hide');
	            			//gantt.fetch();
	            		}
	            		
	            		
	            		//alert('some response'+response);
	            		
	            	});
            	//}
            },
            manifests : new Backbone.Collection(),
            passengers : new Backbone.Collection(),
            paths:[],
            template: _.template($('#editflight-template').html()),
            templatedetails : _.template($('#flight_selector_details').html()),
            staticMapTemplate: _.template($('#staticmap-template').html()),
            render: function () {
                this.$el.html("");
            	//socket.get('/flights/getCompanyResourceSharingByFlightId/',{id:this.model.get('id')},_.bind(function(companies){
            	//	if(companies.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
               //     	return location.reload(); // Will boot back to login screen
                //    }
                    this.model.set('company_mappings',[]); //companies //TODO..
                    
                    addPassengersList(this.model.get('flights')[0].flight_id,_.bind(function(err,paxs){
	                    if(paxs!=null&&paxs.error != undefined){ // reloads with flash message or further kicking out user.
	                    	return location.reload(); 
	                    }
	                    
	                    for(var i=0;i<paxs.length;i++){
	                    	paxs[i].details = new Backbone.Collection(paxs[i].details);
	                    }
	                    
	                    this.manifests.set(paxs);
                    	//this.passengers.set(paxs);
                    
                    	/// Model attributes that need to be set before building template
                    	this.model.set('activeTab',activeTab);  
                    	if(selectedLeg==null&&selectedTempLeg==null){
                    		if(this.model.get('flights').length>0){
                    			selectedLeg = this.model.get('flights')[0].id;
                    		}
                    	}
                    	//TODO - prolly need to do a CHECK to make sure the selectedLeg/selectedTempLeg still exists....
                    	
                    	// End pre-add model attributes
                    
	                    this.$el.append(this.template(this.model.toJSON()));
		                this.postRender();
		                this.updateFlightSelectorPanel();
		                if(typeof(paxs)!='undefined'&&paxs){
		                	//return;
		                	this.initManifests();
		                }
		                
		                this.flightPathChanged(   $($('select.edit_origin_airport')[0]),$($('select.edit_destination_airport')[0]), $($('.leg-map')[0]));
		                
		                
                    },this));
            		//this.render();
            	//},this));
                
                
                function addPassengersList(flightId, cb){   /// THIS 
                	if(flightId==null){
                    	return cb(null,[]);
                    }
                	socket.get('/manifests/getandjoinmanifestdetailsbyflight',{id:flightId},function(paxs){
                		if(paxs.error != undefined){ 
	                    	return location.reload(); 
	                    }
	                    cb(null,paxs);
                	});
                }
                
            },
            passengersDatatable:null,
            bindDatatablesRow:function(row,data){
            
            	if(data['boarded']){
            		$(row).addClass('boarded');
            	}
            
            	var manifestDetailsId = data['id'];
            	var manifestId = data['cur_manifest_id'];
            	
            	$(row).attr('manifest_id',manifestDetailsId);
				$(row).find('.checked-in').unbind('click');
	        	$(row).find('.checked-in').click(_.partial(function(self){
	        		self.manifests.get(manifestId).get('details').get(manifestDetailsId).set('checked_in',($(this).is(':checked')?1:0));
	        		socket.get('/manifests/updaterow',{row:self.manifests.get(manifestId).get('details').get(manifestDetailsId).toJSON()},function(result){
		        		if(result.error != undefined){
                            location.reload();
                        }
	        		});
	        	},this));
	        	
	        	$(row).find('.remove-pax').unbind('click');
	        	$(row).find('.remove-pax').click(_.partial(function(self){
	        		//alert('hjere');
	        		self.manifests.get(manifestId).get('details').get(manifestDetailsId).set('is_deleted',1);
	        		
	        		socket.get('/manifests/updaterow',{row:self.manifests.get(manifestId).get('details').get(manifestDetailsId).toJSON()},function(result){
		        		if(result.error != undefined){
                            location.reload();
                        }
	        		});
	        		
	        		var paxData = editFlightView.passengersDatatables[manifestId].api().data();
            		for(var i=0;i<paxData.length;i++){
            			if(paxData[i].id==manifestDetailsId){
	        				editFlightView.passengersDatatables[manifestId].api().row(i).remove().draw();
            				break;
            			}
            		}
	        		
	        	},this));
	        	
	        	$(row).find('.print-pass').unbind('click');
	        	$(row).find('.print-pass').click(_.partial(function(self){
	        	
	        		
	        		$('#boardingPassModal').modal('show');
	        		
	        		$('#boarding_pass_details').empty();
	        		$('#boarding_pass_details').append($(this).closest('tr').children()[0].innerHTML);
	        		
	        		
	        		$('#boarding_pass_manifest_id').empty();
	        		$('#boarding_pass_manifest_id').append($(this).closest('tr').attr('manifest_id'));
	        		
	        		
	        		//$('#board_pass_js_barcode').empty();
	        		
	        	},this));
            },
            initManifests : function(){  //TODO- understand this - contact lookup maybe
            
            	$('#search_contact').isnajaxfield({  // 
            		results:$('#search_contact_results'),
	            	ajax:function(search,cb){
	            		socket.get('/manifests/getcontactsbyname',{search:search},function(result){
	            			if(result.error != undefined){  // result
	                            location.reload(); // result
	                        }
	                        cb(result);
	            		});
	            	},
	            	template:_.template($('#contacts-search-row-template').html()),
	            	click:_.bind(function($row){
	            		if($('#add_all_legs').is(':checked')){
		            		editFlightView.manifests.each(function(manifest){
			            		socket.get('/manifests/addmanifestdetail',{contact_ID:parseInt($row.attr('contact_id')),flight_ID:null, leg_ID:manifest.get('cur_legs_id')},function(result){
			            			if(result.error != undefined){  // result
			                            location.reload(); // result
			                        }
			            		});
		            		});
	            		}else{
	            			socket.get('/manifests/addmanifestdetail',{contact_ID:parseInt($row.attr('contact_id')),flight_ID:this.model.get('flights')[0].flight_id, leg_ID:selectedLeg},function(result){
		            			if(result.error != undefined){  // result
		                            location.reload(); // result
		                        }
		            		});
	            		}
            		},this)
            	});
            	
            	for(var event in  socket.$events){
					if(event.indexOf('manifest')==0){
						socket.removeListener(event,this.manifestEvent);
					}
				}
				
            	// Remove old datatables maybe....
            	this.passengersDatatables = {};
            	
            	this.manifests.each(_.bind(function(manifest){
            		this.passengersDatatables[manifest.get('id')] = $('#passengers_'+manifest.get('cur_legs_id')).dataTable( {
			            language: {
	        				search: "",
					        searchPlaceholder: "Filter Manifest"
					    },
					    cur_legs_id : manifest.get('cur_legs_id'),
					    cur_manifest_id : manifest.get('id'),
			        	"dom":"ftipr",
						"ajax": _.bind(function (data, callback, settings) {
					    	callback({"data":manifest.get('details').toJSON()});//this.passengers.toJSON()});
						},this),
						"aoColumns":[
				        	{"mData":"cur_manifest_id","visible":false}
				         	,{"mData":function(data,b){ 
				         		return data.contact_name; }
					        },{"mData":function(data,b){ 
					        	return "<input type=\"checkbox\" "+(data.checked_in?' checked="checked" ':'')+"class=\"checked-in\">"; }
					        },{"mData":function(data,b){ 
					        	return '<div class="btn btn-danger remove-pax">Remove</div>'; }
					        },{"mData":function(data,b){ 
					        	return '<div class="btn btn-success print-pass">Print Boarding Pass</div>'; }
					        }
				        ],
				        "rowCallback": _.bind(function( row, data, displayIndex ) {
				        
				        	//this.passengers.get(data['id']).set('displayIndex',displayIndex);
				        	this.bindDatatablesRow(row,data,manifest);
				        	
						},this)
					});
					
					socket.on('manifest_'+manifest.get('id'),this.manifestEvent);
            	},this));
            	
            	
            
	            //this.passengersDatatable = 
				
				/**/
				
				//socket.get('/manifests/joinmanifest',this.model.get('
            },
            manifestEvent:function(update){
            	var updateRow = editFlightView.manifests.get(update.cur_manifest_id).get('details').get(update.id);
            	if(typeof(updateRow)!='undefined'&&!_.isEqual(updateRow.toJSON(),update)){
            		if(update.is_deleted){
            			editFlightView.manifests.get(update.cur_manifest_id).get('details').remove(update.id);
            			var paxData = editFlightView.passengersDatatables[update.cur_manifest_id].api().data();
	            		for(var i=0;i<paxData.length;i++){
	            			if(paxData[i].id==update.id){
		        				editFlightView.passengersDatatables[update.cur_manifest_id].api().row(i).remove().draw(); // Re-binds All checkboxes?
	            				break;
	            			}
	            		}
            		}else{
	            		updateRow.set(update);
	            		var paxData = editFlightView.passengersDatatables[update.cur_manifest_id].api().data();
	            		for(var i=0;i<paxData.length;i++){
	            			if(paxData[i].id==update.id){
		        				editFlightView.passengersDatatables[update.cur_manifest_id].api().row(i).data(update); //update data
		        				if(editFlightView.passengersDatatables[update.cur_manifest_id].find('tr[manifest_id='+updateRow.get('id')+']').length>0){
			        				editFlightView.bindDatatablesRow(editFlightView.passengersDatatables[update.cur_manifest_id].find('tr[manifest_id='+updateRow.get('id')+']'),update);
		        				}
	            				break;
	            			}
	            		}
            		}
            	}else if(typeof(updateRow)=='undefined'){  //Adding new passenger (not in list)
            	
            		update.contact_name = update.last_name + ', ' + update.first_name;
            		delete update.last_name;
            		delete update.first_name;
            		editFlightView.manifests.get(update.cur_manifest_id).get('details').add(update);
            		editFlightView.passengersDatatables[update.cur_manifest_id].api().row.add(editFlightView.manifests.get(update.cur_manifest_id).get('details').get(update.id).toJSON()).draw();
            	}
            },
            postRender:function(){
            	this.self = this;
                if(mobileDetect.mobile()==null){
	                $('#edit_airline').combobox();
	                $('.edit_origin_airport').combobox();
               		$('.edit_destination_airport').combobox();
               		setTimeout(function(){
            			resizeComboBoxes();
               		},500);
                }
                
                $('.flight-wrapper').each(function(){
                 	editFlightView.flightPathChanged($(this).find('select.edit_origin_airport'),$(this).find('select.edit_destination_airport'),$(this).find('.leg-map'));
                	//editFlightView.flightPathChanged(editFlightView.model.get('flights')[getIndexById(editFlightView.model.get('flights'),$(this).attr('leg'), $(this).attr('templeg'))],$(this).find('.leg-map'));
                });
                
                
                
                
                $('.tabbable ul.nav-tabs li a').click(function(){
                	activeTab = $(this).attr('href');//'#tab2'
                	setTimeout(function(){
                		resizeComboBoxes();
                	},20);
                	
                });
                
                
                $('.edit_flight_origin_datepicker').each($.proxy(function(index,element){
                	
                	
                	var flightindex= getIndexById(this.model.get('flights'),$(element).closest('.flight-wrapper').attr('leg'),$(element).closest('.flight-wrapper').attr('templeg'));
                	var flight = this.model.get('flights')[flightindex];
                
                	$(element).initDateTimePicker({ 
				        language:'<%=req.session.user.locale%>', 
				        format:'yyyy-MM-dd hh:mm',
				        pickTime: true,
	            		pickSeconds: false,
				        widgetAttribute:'edit_flight_origin_datepicker'+Math.floor(Math.random()*99999),
		        		appendTo:'#flightModal .modal-body',
				        changeDate:$.proxy(function(e){
				        	if(flight.origin_timezone!=null&&$(element).data('datetimepicker').getLocalDate()!=null){
				        		// Get UTC date and shift back and forth appropriately out of local timezone into airport timezone retreiving relative UTC string.
					        	var elementDate = $(element).data('datetimepicker').getLocalDate();
					        	elementDate.setTime(elementDate.getTime()-(new Date().getTimezoneOffset()*60000));
					        	elementDate.setTime(elementDate.getTime()-(parseInt(flight.origin_timezone)*60*60000));
					        	
					        	
					        	var tflights = this.model.get('flights');
					        	tflights[flightindex].departure_time = elementDate.toISOString();
					        	this.model.set('flights',tflights);
					        	this.updateFlightStats();
				        	}else{
				        		var tflights = this.model.get('flights');
					        	tflights[flightindex].departure_time = null;
					        	this.model.set('flights',tflights);
			        		}
			        		if((selectedLeg!=null&&this.model.get('flights')[flightindex].id == selectedLeg )|| (selectedTempLeg!=null&&this.model.get('flights')[flightindex].tempId == selectedTempLeg )){
			        			this.updateFlightSelectorDetails();
			        		}
				        },editFlightView)
					});
					
					if(flight.departure_time==null||flight.origin_airport_code==null){
						$(element).data('datetimepicker').disable();
					}else{
						var elementDate = new Date(flight.departure_time);
			        	elementDate.setTime(elementDate.getTime()+(parseInt(flight.origin_timezone)*60*60000));
			        	elementDate.setTime(elementDate.getTime()+(new Date().getTimezoneOffset()*60000));
						$(element).data('datetimepicker').setLocalDate(elementDate);
						editFlightView.updateOrigin($(element).closest('.flight-wrapper').find('select.edit_origin_airport'),$(element),false);
					}
                },this));
                
                
                
                
                $('.edit_flight_destination_datepicker').each($.proxy(function(index,element){
                
                	var flightindex= getIndexById(this.model.get('flights'),$(element).closest('.flight-wrapper').attr('leg'),$(element).closest('.flight-wrapper').attr('templeg'));
                	var flight = this.model.get('flights')[flightindex];
                	
                	$(element).initDateTimePicker({ 
				        language:'<%=req.session.user.locale%>', 
				        format:'yyyy-MM-dd hh:mm',
				        pickTime: true,
	            		pickSeconds: false,
				        widgetAttribute:'edit_flight_destination_datepicker'+Math.floor(Math.random()*99999),
		        		appendTo:'#flightModal .modal-body',
				        changeDate:$.proxy(function(e){
				       		if(flight.destination_timezone!=null&&$(element).data('datetimepicker').getLocalDate()!=null){
				        		// Get UTC date and shift back and forth appropriately out of local timezone into airport timezone retreiving relative UTC string.
					        	var elementDate = $(element).data('datetimepicker').getLocalDate();
					        	elementDate.setTime(elementDate.getTime()-(new Date().getTimezoneOffset()*60000));
					        	elementDate.setTime(elementDate.getTime()-(parseInt(flight.destination_timezone)*60*60000));
					        	
					        	var tflights = this.model.get('flights');
					        	tflights[flightindex].arrival_time = elementDate.toISOString();
					        	this.model.set('flights',tflights);
					        	this.updateFlightStats();
				        	}else{
				        	
				        	
					        	var tflights = this.model.get('flights');
					        	tflights[flightindex].arrival_time = null;
					        	this.model.set('flights',tflights);
			        		}
			        		if((selectedLeg!=null&&this.model.get('flights')[flightindex].id == selectedLeg )|| (selectedTempLeg!=null&&this.model.get('flights')[flightindex].tempId == selectedTempLeg )){
			        			this.updateFlightSelectorDetails();
			        		}
				        },editFlightView)
					});
					if(flight.departure_time==null||flight.destination_airport_code==null){
						$(element).data('datetimepicker').disable();
					}else{
						var elementDate = new Date(flight.arrival_time);
			        	elementDate.setTime(elementDate.getTime()+(parseInt(flight.destination_timezone)*60*60000));
			        	elementDate.setTime(elementDate.getTime()+(new Date().getTimezoneOffset()*60000));
						$(element).data('datetimepicker').setLocalDate(elementDate);
						editFlightView.updateDestination($(element).closest('.flight-wrapper').find('select.edit_destination_airport'),$(element),false);
					}
                	
                },this));
                
				
				
				
				$("#preview_flight_summary_collapse_handle").click(function(){
				    $(this).children('i').toggleClass("icon-collapse-alt icon-expand-alt");
				    
				    if($(this).children('i').hasClass('icon-collapse-alt')){
				    	$('#flightModal').find('.modal-header').css('border-bottom','1px solid #eee');
			    	}else{
				    	$('#flightModal').find('.modal-header').css('border-bottom','none');
			    	}
				});
            }
        });
        editFlightView  = new EditFlightView({model:editFlightModel});
        
        
        $('#save_edit_flight').click(function(){
        	editFlightView.save();
    	});
    	
    	$('#delete_edit_flight').click(function(){
    		editFlightView.remove();
    	});
		
		
    	$(window).resize(function(){resizegantt(); resizeComboBoxes();});
    	resizegantt();
	}
	
	function resizeComboBoxes(){
	
		var padding = 45;
		console.log($('.flex-input-width').length);
		$('.flex-input-width').each(function(){
			if($(this).parent().parent().width()<180 + padding){
				$(this).width($(this).parent().parent().width()-padding);
			}else{
				$(this).width(180);
			}
		});
	}
	
	
	// This function updates the current time indicator line
    function doDate(){
        $('.current-time-line').remove();
        $('.current-time-block').remove();
        var selectedDate = $('#flightdatepicker').data('datetimepicker').getLocalDate();
        selectedDate.setHours(0,0,0,0);
        var yesterday  = new Date(selectedDate);
        yesterday.setDate(selectedDate.getDate()-1);
        var yesterday9pm = new Date(yesterday).setHours(21);
        var tomorrow = new Date(selectedDate);
        tomorrow.setDate(selectedDate.getDate()+1);
        var tomorrow3am = new Date(tomorrow).setHours(3);

        var today_date = new Date();
        if(selectedDate.getFullYear() == today_date.getFullYear()&&selectedDate.getMonth() == today_date.getMonth()&&selectedDate.getDate() == today_date.getDate()){
            var heit = $('#ganttwrapper').height();
            $('#ganttwrapper').append('<div class="current-time-line" style=" height:'+ heit+'px; left:'+ 100*(today_date.getTime() - yesterday9pm)/(tomorrow3am- yesterday9pm)+'%;"></div>');
            $('#ganttwrapper').append('<div class="current-time-block" style="width:40px; left:' + (100*(today_date.getTime() - yesterday9pm)/(tomorrow3am- yesterday9pm))+'%;"><div class="time-spot">'+padLeft(today_date.getHours(),2)+':'+padLeft(today_date.getMinutes(),2)+'</div><div class="icon-spot"><i class="icon-circle-arrow-down"></i></div></div>');
        }
    }
    setInterval(doDate,60000);
    
    
	
	
	// this resizegantt function corrects the header sizing, font size/weight
    // it also corrects positioning of the popvers and datetimepickers
     function resizegantt(){
        var elsize=0;
        var fsize = 0;
        $('.timeblock').each(function(){
            if(elsize ==0)
            {
                elsize= 1.786*$(this).parent().width()-8+'px'
            }
            if(fsize ==0){
                fsize = 0.15*$(this).parent().width()+7.65+'px';
            }
            $(this).css('line-height',elsize);
            $(this).css('font-size',fsize);

        });

    }
	
</script>
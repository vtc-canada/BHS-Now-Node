
<!-- This is the template for each gantt row -->
<script type="text/template" id="ganttrows-template">
    {{ if (deleted){ return; } }}
    <div class="span12 ganttrow">
        {{ var selectedDate = $('#datepicker').data('datetimepicker').getLocalDate(); selectedDate.setHours(0,0,0,0);    var yesterday  = new Date(selectedDate); yesterday.setDate(selectedDate.getDate()-1); var yesterday9pm = new Date(yesterday).setHours(21); var tomorrow = new Date(selectedDate); tomorrow.setDate(selectedDate.getDate()+1); var tomorrow3am = new Date(tomorrow).setHours(3); var departuredatetime = dateFromISO(departure_time); var on_time_open_date = new Date(departuredatetime);on_time_open_date.setMinutes(departuredatetime.getMinutes() + on_time_open_offset);           var late_open_date = new Date(departuredatetime); late_open_date.setMinutes(departuredatetime.getMinutes() + late_open_offset);          var locked_out_open_date = new Date(departuredatetime);         locked_out_open_date.setMinutes(departuredatetime.getMinutes() + locked_out_open_offset);      }}
        {{ tatemp = dateFromISO(departure_time) }}
        {{ tatemp.toString() }}
        {{ departuredatetime }}
        <div class="clockblock"><div class="gantblock" style="border-top:none;"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>

        {{ var lefttemp = 100*(on_time_open_date.getTime() - yesterday9pm)/(tomorrow3am- yesterday9pm); }}
        {{ var widthtemp = 100*(locked_out_open_date.getTime() - on_time_open_date.getTime())/(tomorrow3am- yesterday9pm); }}
        {{ var prewidthtemp = widthtemp; }}
        {{ var greenwidthtemp = 100*(late_open_date.getTime() - on_time_open_date.getTime())/(locked_out_open_date.getTime() - on_time_open_date.getTime()); }}
        {{ var yellowwidthtemp = 100*(locked_out_open_date.getTime() - late_open_date.getTime())/(locked_out_open_date.getTime() - on_time_open_date.getTime()); }}
        {{ if(lefttemp < 0){ widthtemp = widthtemp + lefttemp; yellowwidthtemp=yellowwidthtemp*prewidthtemp/widthtemp; greenwidthtemp = 100-yellowwidthtemp; lefttemp =0;   } }}
        {{ if(lefttemp + widthtemp > 100){ widthtemp = 100-lefttemp; greenwidthtemp=greenwidthtemp*prewidthtemp/widthtemp; yellowwidthtemp = 100-greenwidthtemp; } }}

        <a class="progress ganntbar" savevalue="{{= departure_time }}" sort_plan_id="{{= id }}" data-placement="bottom" data-content="Loading.." title="" data-original-title="<%= __('Flight')%> {{= getPropertybyId(ref_airline_code,'IATA_2_digit_ID',airline)+' '+flight_number }}" style="top:7px; left:{{= lefttemp }}%; width:{{= widthtemp }}%; {{ if(lefttemp==0){ }} border-radius:0px 4px 4px 0px; {{ }else if(lefttemp+prewidthtemp>100){ }} border-radius:4px 0px 0px 4px; {{ } }}">
            <div class="bar bar-right progress-bar-warning" style="width:{{= yellowwidthtemp }}%;"></div>
            <div class="bar progress-bar-success gantt-flightname-div" style="width:{{= greenwidthtemp }}%;">{{= getPropertybyId(ref_airline_code,'IATA_2_digit_ID',airline)+' '+flight_number }}</div>

        </a>
    </div>
</script>

<script type="text/template" id="staticmap-template">
	{{ var flightPathString = '',markerCount=1; }}
	{{for(var i=0;i<paths.length;i++){ }}
		{{ if(paths[i].origin&&paths[i].destination){ }}
			{{ flightPathString+= (i>0?'&':'') + 'path=geodesic:true|color:0x0000ff|weight:5|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude + '|'+ paths[i].destination.latitude + ',' + paths[i].destination.longitude;  }}
			{{ flightPathString+= '&markers=color:0x0000ff|label:'+markerCount+'|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude; markerCount++; }}
			{{ flightPathString+= '&markers=color:0x0000ff|label:'+markerCount+'|' + paths[i].destination.latitude + ',' + paths[i].destination.longitude; markerCount++; }}
			
		{{ }else if(paths.length==1&&paths[i].origin){ }}
			{{ flightPathString ='center='+paths[i].origin.latitude+','+paths[i].origin.longitude+'&zoom=5'; }}
			{{ flightPathString+= '&markers=color:0x0000ff|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude; markerCount++; }}
		{{ }else if(paths.length==1&&paths[i].destination){ }}
			{{ flightPathString ='center='+paths[i].destination.latitude+','+paths[i].destination.longitude+'&zoom=5';  }}
			{{ flightPathString+= '&markers=color:0x0000ff|' + paths[i].destination.latitude + ',' + paths[i].destination.longitude; markerCount++; }}
		{{ } }}
	{{ } }}
	{{ if(flightPathString==''){ }}
		{{ flightPathString ='center=Canada&zoom=3';  }}
	{{ } }}
	
	<img src="//maps.googleapis.com/maps/api/staticmap?{{=flightPathString}}&size=320x240" alt=""/>
</script>

<script type="text/template" id="editflight-template">

	<div class="row-fluid">
		<div class="span3" id="editmap_preview_wrapper">
		
		<!--<img src="//maps.googleapis.com/maps/api/staticmap?path=geodesic:true|color:0x0000ff|weight:5|51.1139,-114.02|47.6186,-52.7519&size=320x240" alt=""/>-->
		</div>
		<div class="span5">
			<div class="row-fluid">
				<div class="span3">Distance:</div>
				<div class="span3" id="edit_flight_stats_distance"></div>
			</div>
			<div class="row-fluid">
				<div class="span3">Duration:</div>
				<div class="span3" id="edit_flight_stats_duration"></div>
			</div>
		</div>
	</div>
	
		
	<div class="tabbable"> <!-- Only required for left/right tabs -->
	  <ul class="nav nav-tabs">
	    <li class="active"><a href="#tab1" data-toggle="tab">General</a></li>
	    <li><a href="#tab2" data-toggle="tab">Route Details</a></li>
	  </ul>
	  <div class="tab-content">
	    <div class="tab-pane active" id="tab1">
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_flight_number">Flight Number:</label></div>
		    	<div class="span4"><input type="text" id="edit_flight_number" value="{{=flight_number}}"/></div>
	    	</div>
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_airline">Airline:</label></div>
		    	<div class="span4">
		    	<select id="edit_airline">
		    		{{for(var i=0;i<airlines.length;i++){ }}
		    			<option IATA_code="{{=airlines[i].IATA_code}}" IATA_2_digit_ID="{{=airlines[i].IATA_2_digit_ID}}" value="{{=airlines[i].id}}">{{=airlines[i].IATA_2_digit_ID}} - {{=airlines[i].carrier}}</option>
		    		{{ } }}
		    	</select>
		    	</div>
	    	</div>
	    </div>
	    
	    <div class="tab-pane" id="tab2">
	    	<div class="row-fluid">
				<div class="row-fluid flight-leg-title">Origin:</div>
				<div class="row-fluid">
					<div class="span6">
		    			<label for="edit_origin_airport">Airport:</label>
		    		</div>
		    		<div class="span6 input-append">
			    		<select id="edit_origin_airport">
			      			<option IATAFAA="" ICAO="" value="">Choose Origin</option>
				    		{{for(var i=0;i<airports.length;i++){ }}
				    			<option timezone="{{=airports[i].timezone}}" latitude="{{=airports[i].latitude}}" longitude="{{=airports[i].longitude}}" IATAFAA="{{=airports[i].IATAFAA}}" ICAO="{{=airports[i].ICAO}}" value="{{=airports[i].id}}">{{=airports[i].IATAFAA}} - {{=airports[i].name}}</option>
				    		{{ } }}
				    	</select>
		    		</div>
				</div>
				
				<div class="row-fluid">
		    		<div class="span6">
		    			<label for="edit_origin_airport">Scheduled Departure:<span class="origin-timezone"></span></label>
		    		</div>
					<div id="edit_flight_origin_datepicker" class="input-append span6">
		                <input data-format="yyyy-MM-dd" class="isn-datepicker" type="text" value="">
		                <span class="add-on">
		                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
		                </span>
		            </div>
		    	</div>
			</div>
			
			<div class="row-fluid">
				<div class="row-fluid flight-leg-title">Destination:</div>
				<div class="row-fluid">
					<div class="span6">
		    			<label for="edit_origin_airport">Airport:</label>
		    		</div>
		    		<div class="span6 input-append">
			      		<select id="edit_destination_airport">
			      			<option IATAFAA="" ICAO="" value="">Choose Destination</option>
				    		{{for(var i=0;i<airports.length;i++){ }}
				    			<option timezone="{{=airports[i].timezone}}" latitude="{{=airports[i].latitude}}" longitude="{{=airports[i].longitude}}" IATAFAA="{{=airports[i].IATAFAA}}" ICAO="{{=airports[i].ICAO}}" value="{{=airports[i].id}}">{{=airports[i].IATAFAA}} - {{=airports[i].name}}</option>
				    		{{ } }}
				    	</select>
		    		</div>
				</div>
				
				<div class="row-fluid">
		    		<div class="span6">
		    			<label for="edit_origin_airport">Scheduled Arrival:<span class="destination-timezone"></span></label>
		    		</div>
					<div id="edit_flight_destination_datepicker" class="input-append span6">
		                <input data-format="yyyy-MM-dd" class="isn-datepicker" type="text" value="">
		                <span class="add-on">
		                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
		                </span>
		            </div>
		    	</div>
			</div>
	    
	    </div>
	    
	  </div>
	</div>
</script>

<div class="row-fluid">
    <div class="row-fluid">
        <div class="top-page-title span5 offset1"><%= __('Schedule Parameters')%>:</div>
    </div>
    <div class="row">
        <div class="span2 offset2">
            <div class="row">
                <label id="timepickerlabel" style="color: #717171;" for="timepickerlabel"><%= __('Schedule Date')%>:</label>
            </div>
        </div>
        <div class="span3 input-datepicker-smallpad">
            <div id="flightdatepicker" class="input-append span6">
                <input data-format="yyyy-MM-dd" type="text" value="">
                <span class="add-on">
                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
                </span>
            </div>
        </div>
    </div>
</div>

<!-- Gantt table section -->
<div class="row-fluid" style="margin-top:20px;">
    <div class="span10 offset1 page-controls-wrapper">
        <div class="row-fluid" id="reportheader"><span id="report-header-date" style="padding-left:10px;"><%= __('Select Date')%></span>
            <div class="span4 pull-right">
                <div class="row-fluid">
                    <button id="save_flights" class="btn-create-flight-gantt btn btn-primary" disabled="disabled"><%= __('Save')%></button>
                    <button id="add_flight" class="btn-add-flight-gantt btn btn-primary" ><%= __('Create')%></button>
					<div style="margin-right: 10px; color: rgb(153, 0, 0); font-weight: 400; display: none;" class="pull-right save_pull" id="changes_pending">Changes Pending. &nbsp;</div>
                </div>
            </div>
        </div>
        <div class="row-fluid" id="iframediv" >
            <div class="row-fluid">
                <div class="span3 search-gant-wrapper">
                    <input type="text"  placeholder="<%= __('Filter By')%>..." id="searchgantt" />
                </div>
            </div>

            <div class="gantt-outer-wrapper">
                <div id="ganttwrapper" class="row-fluid">
                    <div id="gantttimescale" class="span12">

                        <div class="clockblock"><div class="timeblock">22:00</div></div>
                        <div class="clockblock"><div class="timeblock">23:00</div></div>
                        <div class="clockblock"><div class="timeblock">00:00</div></div>
                        <div class="clockblock"><div class="timeblock">01:00</div></div>
                        <div class="clockblock"><div class="timeblock">02:00</div></div>
                        <div class="clockblock"><div class="timeblock">03:00</div></div>
                        <div class="clockblock"><div class="timeblock">04:00</div></div>
                        <div class="clockblock"><div class="timeblock">05:00</div></div>
                        <div class="clockblock"><div class="timeblock">06:00</div></div>
                        <div class="clockblock"><div class="timeblock">07:00</div></div>
                        <div class="clockblock"><div class="timeblock">08:00</div></div>
                        <div class="clockblock"><div class="timeblock">09:00</div></div>
                        <div class="clockblock"><div class="timeblock">10:00</div></div>
                        <div class="clockblock"><div class="timeblock">11:00</div></div>
                        <div class="clockblock"><div class="timeblock">12:00</div></div>
                        <div class="clockblock"><div class="timeblock">13:00</div></div>
                        <div class="clockblock"><div class="timeblock">14:00</div></div>
                        <div class="clockblock"><div class="timeblock">15:00</div> </div>
                        <div class="clockblock"><div class="timeblock">16:00</div></div>
                        <div class="clockblock"><div class="timeblock">17:00</div></div>
                        <div class="clockblock"><div class="timeblock">18:00</div></div>
                        <div class="clockblock"><div class="timeblock">19:00</div></div>
                        <div class="clockblock"><div class="timeblock">20:00</div></div>
                        <div class="clockblock"><div class="timeblock">21:00</div></div>
                        <div class="clockblock"><div class="timeblock">22:00</div></div>
                        <div class="clockblock"><div class="timeblock">23:00</div></div>
                        <div class="clockblock"><div class="timeblock">00:00</div></div>
                        <div class="clockblock"><div class="timeblock">01:00</div></div>
                        <div class="clockblock"><div class="timeblock">02:00</div></div>
                        <div class="clockblock"><div class="timeblock">03:00</div></div>
                    </div>

                    <div id="ganttrows" class="row-fluid">

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- This Modal Dialog is displayed when the user goes to change his password from the myaccount dropdown -->
      <div id="flightModal" class="modal modal-lg hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
          <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
              <h3 id="myModalFlightLabel"><%= __('Create Flight') %></h3>
          </div>
          <div class="modal-body modal-body-overflow" id="edit_flight_body">
              
          </div>
          <div class="modal-footer">
              <button class="btn" data-dismiss="modal" id="flightchangecancel" aria-hidden="true"><%= __('FormCancel') %></button>
              <button class="btn btn-primary" id="confirmmypasswordchange"><%= __('FormSet') %></button>
          </div>
      </div>

<script type="text/javascript">

	var airlines = <%-JSON.stringify(airlines)%>;
	var airports = <%-JSON.stringify(airports)%>;
    var gantt;       // This is the collection of rows/flights
	var editFlightView; // This Backbone View wraps creating/editing new flights.


		
    $(function(){
    	socket.on('connect',initialize);
    
    });
    function initialize(){
    
    
        // binds datetimepicker to the main schedule date input
        // when this date is changed, we fetch the new flights from serverside
        // this triggers render().
        $('#flightdatepicker').initDateTimePicker({ 
	        language:'<%=req.session.user.locale%>', 
	        format:'yyyy-MM-dd',
	        pickTime: false,
	        pick12HourFormat: false,
	        widgetAttribute:'select_date',
	        changeDate:function(e){
	       		
	        }
		});
		
		$('#add_flight').click(function(){
			this.newFlight = new GanttModel({id:null,airline:null,flight_number:null});
			editFlightView = new EditFlightView({model:this.newFlight});
			$('#flightModal').modal('show');
	        
		});
		
		$('#flightModal').modal({backdrop:'static',show:false})
        $('#flightModal').on('show',function(e){
        	//$('.modal-body-overflow').css('max-height','none');
        	fixModals();
        	
        });
		
		//////////////////////////////////////////////////
        //////// GANTT ///////////////////////////////////
        //////////////////////////////////////////////////
        // The gantt collection is created.
        // then ganttView.render() is called to make the graph
        // when the request for the collection is made, date parameter is passed in
        var GanttModel = Backbone.Model.extend({
            urlRoot: ''
        });

        var SailsGanttCollection = Backbone.Collection.extend({
            sailsCollection: "",
            socket: null,
            sync: function(method, model, options){
                options.date = $('#datepicker input').val();
                if(typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                    this.socket = socket;

                    this.socket.get(this.sailsCollection, options, _.bind(function(flighttables){
                        if(flighttables.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                        }
                        this.reset(flighttables);
                        //this.set(flighttables);
                        ganttView.render();
                    }, this));
                }
            }
        });

        var GanttCollection = SailsGanttCollection.extend({
            sailsCollection: '/flights/findByDate',
            model: GanttModel
        });

        // creates the collection, it's 'fetch'ed' later
        gantt = new GanttCollection();

        // this view object builds the graph on the page
        // clicking on the flights is binded to the do_popover() function, passing in
        // the flight bar object, and false indicating it's not 'create'ing a new flight
        // the render function binds the popover
        // and rebinds the 'save flights' event.
        var GantView = Backbone.View.extend({
            el: '#ganttrows',
            initialize: function () {
            },
            events:{
                'click a.progress.ganntbar':'gantClick'
            },
            gantClick:function(event){
                //do_popover(event,false);
            },
            template: _.template($('#ganttrows-template').html()),
            render: function () {
                this.$el.html("");
                var tcollection = this.collection.sortBy(function(message){
                    return message.get("departure_time");
                });
                for(var i=0; i<tcollection.length; i++)
                {
                    var passsearch = true;
                    // skip out ones that do not satisfy search terms
                    var terms = $('#searchgantt').val().split(' ');

                    for(var j=0;j<terms.length;j++){
                        if(terms[j]==""){
                            continue;
                        }
                        if((getPropertybyId(ref_airline_code,'IATA_2_digit_ID',tcollection[i].get('airline')).toString()+tcollection[i].get('flight_number').toString()).toLowerCase().indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_early_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_late_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_locked_out_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_on_time_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                ){
                            passsearch = false;
                        }
                    }
                    if(passsearch){
                        this.$el.append(this.template(tcollection[i].toJSON()));
                    }
                }
                $('#ganttrows .ganttrow:last-child').addClass('lastchild');
                $('#save_flights').css('display','block');
                $('#add_flight').css('display','block');
                /*$('#save_flights').unbind();
                $('#save_flights').click(function(){
                    var params = {flight_plans:gantt.toJSON(),date:$('#datepicker input').val()};

                    socket.get("/flighttable/saveFlightsByCarouselandDate", params,function(data){
                        if(data.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                            return;
                        }
                        
                        if(data.success){
                        	gantt.fetch();
                        	bannerAlert('success','<%=__('FormSuccess')%>','<%=__('All changes saved.')%>');
                        }
                    });
                });
				setChangesPending();
                doDate();*/
            }
        });
         // the view is created here, but the gantt collection is still empty.
        var ganttView = new GantView({collection: gantt});
		
		
		var EditFlightView = Backbone.View.extend({
            el: '#edit_flight_body',
            map: '#editmap_preview_wrapper',
            initialize: function () {
            	this.render();
            },
            events:{
                'change #edit_origin_airport':'originPathChanged',
                'change #edit_destination_airport':'destinationPathChanged'
            },
            originPathChanged:function(event){
            	var timezone = parseInt($('#edit_origin_airport option:selected').attr('timezone'));
            	if(isNaN(timezone)){
            		timezone = null;
            		$('.origin-timezone').html('');
            	}else{
            		$('.origin-timezone').html('<b>(Local GMT '+(timezone>0?'+':'')+timezone+')</b>');
            	}
            	this.model.set('origin_timezone', timezone);
            	this.flightPathChanged();
            },
            destinationPathChanged:function(event){
            	var timezone = parseInt($('#edit_destination_airport option:selected').attr('timezone'));
            	if(isNaN(timezone)){
            		timezone = null;
            		$('.destination-timezone').html('');
            	}else{
            		$('.destination-timezone').html('<b>(Local GMT '+(timezone>0?'+':'')+timezone+')</b>');
            	}
            	this.model.set('destination_timezone', timezone);
            	this.flightPathChanged();
            },
            flightPathChanged:function(event){
                $(this.map).empty();
                
                var paths = [{
                	origin: ($('#edit_origin_airport').val()==''?null:{latitude:$('#edit_origin_airport option:selected').attr('latitude'),longitude:$('#edit_origin_airport option:selected').attr('longitude')}), 
                	destination :   ($('#edit_destination_airport').val()==''?null:{latitude:$('#edit_destination_airport option:selected').attr('latitude'),longitude:$('#edit_destination_airport option:selected').attr('longitude')}) 
                	}];
                	
                $(this.map).append(this.staticMapTemplate({paths:paths}));
                if(paths.length>0&&paths[0].origin!=null&&paths[0].destination!=null){
	                $('#edit_flight_stats_distance').html(geolib.getDistance(
					    {latitude: paths[0].origin.latitude, longitude: paths[0].origin.longitude}, 
					    {latitude: paths[0].destination.latitude, longitude: paths[0].destination.longitude}
					));
                }else{
                	$('#edit_flight_stats_distance').html('');
                }
            },
            template: _.template($('#editflight-template').html()),
            staticMapTemplate: _.template($('#staticmap-template').html()),
            render: function () {
                this.$el.html("");
                this.$el.append(this.template(this.model.toJSON()));
                
                
                
                this.postRender();
                this.flightPathChanged();
                
            },
            postRender:function(){
            	this.self = this;
                $('#edit_airline').combobox();
                $('#edit_origin_airport').combobox();
                $('#edit_destination_airport').combobox();
                
                $('#edit_flight_origin_datepicker').initDateTimePicker({ 
			        language:'<%=req.session.user.locale%>', 
			        format:'yyyy-MM-dd hh:mm',
			        pickTime: true,
            		pickSeconds: false,
			        widgetAttribute:'edit_flight_origin_datepicker',
			        changeDate:function(e){
			        	//self.model.set('departure_date_time',)
			        	alert($('#edit_flight_origin_datepicker').data('datetimepicker').getLocalDate());
			       		//self.model.set('origin_timezone')
			        }
				});
				
				$('#edit_flight_destination_datepicker').initDateTimePicker({ 
			        language:'<%=req.session.user.locale%>', 
			        format:'yyyy-MM-dd hh:mm',
			        pickTime: true,
            		pickSeconds: false,
			        widgetAttribute:'edit_flight_destination_datepicker',
			        changeDate:function(e){
			       		//self.model.set('origin_timezone')
			        }
				});
            }
        });
		
		
    	$(window).resize(function(){resizegantt()});
    	resizegantt();
	}
	
	
	
	
	// this resizegantt function corrects the header sizing, font size/weight
    // it also corrects positioning of the popvers and datetimepickers
    resizegantt = function (){
        var elsize=0;
        var fsize = 0;
        $('.timeblock').each(function(){
            if(elsize ==0)
            {
                elsize= 1.786*$(this).parent().width()-8+'px'
            }
            if(fsize ==0){
                fsize = 0.15*$(this).parent().width()+7.65+'px';
            }
            $(this).css('line-height',elsize);
            $(this).css('font-size',fsize);

        });

    }
	
</script>

<!-- This is the template for each gantt row -->
<script type="text/template" id="ganttrows-template">
    {{ if (deleted){ return; } }}
    <div class="span12 ganttrow">
        {{ var selectedDate = $('#flightdatepicker').data('datetimepicker').getLocalDate(); selectedDate.setHours(0,0,0,0);    var yesterday  = new Date(selectedDate); yesterday.setDate(selectedDate.getDate()-1); var yesterday9pm = new Date(yesterday).setHours(21); var tomorrow = new Date(selectedDate); tomorrow.setDate(selectedDate.getDate()+1); var tomorrow3am = new Date(tomorrow).setHours(3); var departuredatetime = dateFromISO(departure_time);  var arrivaldatetime = dateFromISO(arrival_time);      }}
        {{ tatemp = dateFromISO(departure_time) }}
        {{ tatemp.toString() }}
        {{ departuredatetime }}
        {{ arrivaldatetime }}
        <div class="clockblock"><div class="gantblock" style="border-top:none;"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>
        <div class="clockblock"><div class="gantblock"></div></div>

        {{ var lefttemp = 100*(departuredatetime.getTime() - yesterday9pm)/(tomorrow3am- yesterday9pm); }}
        {{ var widthtemp = 100*(arrivaldatetime.getTime() - departuredatetime.getTime())/(tomorrow3am- yesterday9pm); }}
        {{ var prewidthtemp = widthtemp; }}
        {{ if(lefttemp < 0){ widthtemp = widthtemp + lefttemp; lefttemp =0; } }}
        {{ if(lefttemp + widthtemp > 100){ widthtemp = 100-lefttemp; } }}

        <a class="progress ganntbar"  flight_id="{{= id }}"  style="top:7px; left:{{= lefttemp }}%; width:{{= widthtemp }}%; {{ if(lefttemp==0){ }} border-radius:0px 4px 4px 0px; {{ }else if(lefttemp+prewidthtemp>100){ }} border-radius:4px 0px 0px 4px; {{ } }}">

            <div flight_id="{{=id}}" class="bar progress-bar-success gantt-flightname-div" style="width:{{= 100 }}%;">{{= IATA_2_digit_ID+' '+flight_number }}</div>

        </a>
    </div>
</script>

<script type="text/template" id="contacts-search-row-template">
	<div class="contacts-search-row row-fluid" contact_id="{{=contact_id}}">
		<div class="span1 contacts-search-row-id"></div> <!--{{=contact_id}}-->
		<div class="span3 contacts-search-row-name">{{=first_name+' ' +last_name}}</div>
		<div class="span3 contacts-search-row-company">{{=email}}</div>
	</div>
</script>

<script type="text/template" id="staticmap-template">
	{{ var flightPathString = '',markerCount=1; }}
	{{for(var i=0;i<paths.length;i++){ }}
		{{ if(paths[i].origin&&paths[i].destination){ }}
			{{ flightPathString+= (i>0?'&':'') + 'path=geodesic:true|color:0x0000ff|weight:5|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude + '|'+ paths[i].destination.latitude + ',' + paths[i].destination.longitude;  }}
			{{ flightPathString+= '&markers=color:0x0000ff|label:'+markerCount+'|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude; markerCount++; }}
			{{ flightPathString+= '&markers=color:0x0000ff|label:'+markerCount+'|' + paths[i].destination.latitude + ',' + paths[i].destination.longitude; markerCount++; }}
			
		{{ }else if(paths.length==1&&paths[i].origin){ }}
			{{ flightPathString ='center='+paths[i].origin.latitude+','+paths[i].origin.longitude+'&zoom=5'; }}
			{{ flightPathString+= '&markers=color:0x0000ff|' + paths[i].origin.latitude + ',' + paths[i].origin.longitude; markerCount++; }}
		{{ }else if(paths.length==1&&paths[i].destination){ }}
			{{ flightPathString ='center='+paths[i].destination.latitude+','+paths[i].destination.longitude+'&zoom=5';  }}
			{{ flightPathString+= '&markers=color:0x0000ff|' + paths[i].destination.latitude + ',' + paths[i].destination.longitude; markerCount++; }}
		{{ } }}
	{{ } }}
	{{ if(flightPathString==''){ }}
		{{ flightPathString ='center=Canada&zoom=3';  }}
	{{ } }}
	
	<img src="//maps.googleapis.com/maps/api/staticmap?{{=flightPathString}}&size=320x240" alt=""/>
</script>

<script type="text/template" id="editflight-template">
	
	
	
	<div class="row-fluid collapse in" id="preview_flight_summary">
		<div class="span3" id="editmap_preview_wrapper">
		
		<!--<img src="//maps.googleapis.com/maps/api/staticmap?path=geodesic:true|color:0x0000ff|weight:5|51.1139,-114.02|47.6186,-52.7519&size=320x240" alt=""/>-->
		</div>
		<div class="span5">
			<div class="row-fluid">
				<div class="span3">Distance:</div>
				<div class="span3" id="edit_flight_stats_distance"></div>
			</div>
			<div class="row-fluid">
				<div class="span3">Duration:</div>
				<div class="span3" id="edit_flight_stats_duration"></div>
			</div>
		</div>
	</div>
	
	<div class="row-fluid" style="display:none;">
	
	
	
	</div>
		
	<div class="tabbable"> <!-- Only required for left/right tabs -->
	  <ul class="nav nav-tabs" style="margin-bottom:0px;">
	    <li class="active"><a href="#tab1" data-toggle="tab">General</a></li>
	    <li><a href="#tab2" data-toggle="tab">Route Details</a></li>
	    <li><a href="#tab3" data-toggle="tab">Assigned Companies</a></li>
	    <li><a href="#tab4" data-toggle="tab">Passengers</a></li>
	  </ul>
	  <div class="tab-content">
	    <div class="tab-pane active" id="tab1">
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_flight_number">Flight Number:</label></div>
		    	<div class="span4"><input type="text" id="edit_flight_number" model-attribute="flight_number" value="{{=flight_number}}"/></div>
	    	</div>
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_airline">Airline:</label></div>
		    	<div class="span4">
		    	<select id="edit_airline">
	      			<option IATA_code="" IATA_2_digit_ID="" value="">Choose Airline</option>
		    		{{for(var i=0;i<airlines.length;i++){ }}
		    			<option IATA_code="{{=airlines[i].IATA_code}}" IATA_2_digit_ID="{{=airlines[i].IATA_2_digit_ID}}" value="{{=airlines[i].id}}" {{if(airlines[i].id == airline){ }}selected="selected"{{ } }}>{{=airlines[i].IATA_2_digit_ID}} - {{=airlines[i].carrier}}</option>
		    		{{ } }}
		    	</select>
		    	</div>
	    	</div>
	    </div>
	    
	    <div class="tab-pane" id="tab2">
	    	<div class="row-fluid">
				<div class="row-fluid flight-leg-title">Origin:</div>
				<div class="row-fluid">
					<div class="span6">
		    			<label for="edit_origin_airport">Airport:</label>
		    		</div>
		    		<div class="span6 input-append">
			    		<select id="edit_origin_airport">
			      			<option IATAFAA="" ICAO="" value="">Choose Origin</option>
				    		{{for(var i=0;i<airports.length;i++){ }}
				    			<option airport_code="{{=airports[i].id}}" timezone="{{=airports[i].timezone}}" latitude="{{=airports[i].latitude}}" longitude="{{=airports[i].longitude}}" IATAFAA="{{=airports[i].IATAFAA}}" ICAO="{{=airports[i].ICAO}}" value="{{=airports[i].id}}" {{if(airports[i].id == origin_airport_code){ }}selected="selected"{{ } }}>{{=airports[i].IATAFAA}} - {{=airports[i].name}}</option>
				    		{{ } }}
				    	</select>
		    		</div>
				</div>
				
				<div class="row-fluid">
		    		<div class="span6">
		    			<label for="edit_flight_origin_datepicker">Scheduled Departure:<span class="origin-timezone"></span></label>
		    		</div>
					<div id="edit_flight_origin_datepicker" class="input-append span6">
		                <input data-format="yyyy-MM-dd" class="isn-datepicker" type="text" value="">
		                <span class="add-on">
		                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
		                </span>
		            </div>
		    	</div>
			</div>
			
			<div class="row-fluid">
				<div class="row-fluid flight-leg-title">Destination:</div>
				<div class="row-fluid">
					<div class="span6">
		    			<label for="edit_destination_airport">Airport:</label>
		    		</div>
		    		<div class="span6 input-append">
			      		<select id="edit_destination_airport">
			      			<option IATAFAA="" ICAO="" value="">Choose Destination</option>
				    		{{for(var i=0;i<airports.length;i++){ }}
				    			<option airport_code="{{=airports[i].id}}" timezone="{{=airports[i].timezone}}" latitude="{{=airports[i].latitude}}" longitude="{{=airports[i].longitude}}" IATAFAA="{{=airports[i].IATAFAA}}" ICAO="{{=airports[i].ICAO}}" value="{{=airports[i].id}}" {{if(airports[i].id == destination_airport_code){ }}selected="selected"{{ } }}>{{=airports[i].IATAFAA}} - {{=airports[i].name}}</option>
				    		{{ } }}
				    	</select>
		    		</div>
				</div>
				
				<div class="row-fluid">
		    		<div class="span6">
		    			<label for="edit_flight_destination_datepicker">Scheduled Arrival:<span class="destination-timezone"></span></label>
		    		</div>
					<div id="edit_flight_destination_datepicker" class="input-append span6">
		                <input data-format="yyyy-MM-dd" class="isn-datepicker" type="text" value="">
		                <span class="add-on">
		                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
		                </span>
		            </div>
		    	</div>
			</div>
	    
	    </div>
	    <div class="tab-pane" id="tab3">
	    
	    	{{ for(var i=0;i<company_mappings.length;i++){ }}
	    	<div class="row-fluid">
		    	<div class="span4"><label for="edit_flight_company_mapping{{=company_mappings[i].id}}">{{=company_mappings[i].name}}</label></div>
		    	<div class="span4"><input type="checkbox" id="edit_flight_company_mapping{{=company_mappings[i].id}}" class="assign-company-checkbox" company_id="{{=company_mappings[i].id}}" {{if(company_mappings[i].assigned){ }}checked="checked"{{ } }} /></div>
	    	</div>
	    	{{ } }}
	    	
	    </div>
	    
	    <div class="tab-pane" id="tab4">
	    	
	    	<div class="row-fluid isnajaxfield-parent">
              <!-- <div class="row">
                   <div class="span3 report-control-left-label"  style="min-height: 30px;padding-top: 5px;"><label for="search_contact"><%= __('Passenger Details') %></label></div>
                   <div class="span8 report-control-right-control">
                   </div>
               </div>-->
               <div class="row-fluid" style="position:relative">
               
	               <div class="row-fluid search-contact-ajax-wrapper">
	               		<div class="inner-search-contact-wrapper span3 offset1">
	               			<input type="text" id="search_contact" value="" placeholder="Add Passenger">
	               		</div>
	               </div>
	               <div class="btn btn-success pull-right" style="position:absolute; right:4px; top:4px">Import Excel</div>
               </div>
               <div id="search_contact_results" ></div>
               
           </div>
           
	    	
	    	
	    	
	    	<table id="passengers" class="display fms-table" style="" cellspacing="0" width="100%">
		        <thead>
		            <tr>
		            	<th>Id<i class="icon-caret-down"></i><i class="icon-caret-up"></i></th>
		                <th>Name</th>
		                <th>Checked In</th>
		                <th></th>
		                <th></th>
		            </tr>
		        </thead>
		    </table>
	    	
	    </div>
	  </div>
	</div>
	
	
	
	<div data-toggle="collapse" data-target="#preview_flight_summary" id="preview_flight_summary_collapse_handle">
		<i class="icon-collapse-alt icon-2x"></i>
	</div>
</script>

<div class="row-fluid ">
    <div class="row-fluid">
        <div class="top-page-title span5 offset1"><%= __('Schedule Parameters')%>:</div>
    </div>
    <div class="row ">
        <div class="span2 offset2">
            <div class="row">
                <label id="timepickerlabel" style="color: #717171;" for="timepickerlabel"><%= __('Schedule Date')%>:</label>
            </div>
        </div>
        <div class="span3 input-datepicker-smallpad">
            <div id="flightdatepicker" class="input-append span6">
                <input data-format="yyyy-MM-dd" type="text" value="">
                <span class="add-on">
                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i>
                </span>
            </div>
        </div>
    </div>
    <!--<div class="row">
        <div class="span2 offset2"></div>
        <div class="span3 flight-datepicker-parent" style="position:relative;">
    
    </div>-->
</div>

<!-- Gantt table section -->
<div class="row-fluid" style="margin-top:20px;">
    <div class="span10 offset1 page-controls-wrapper">
        <div class="row-fluid" id="reportheader"><span id="report-header-date" style="padding-left:10px;"><%= __('Select Date')%></span>
            <div class="span4 pull-right">
                <div class="row-fluid">
                    <button id="save_flights" class="btn-create-flight-gantt btn btn-primary" disabled="disabled"><%= __('Save')%></button>
                    <button id="add_flight" class="btn-add-flight-gantt btn btn-primary" ><%= __('Create')%></button>
					<div style="margin-right: 10px; color: rgb(153, 0, 0); font-weight: 400; display: none;" class="pull-right save_pull" id="changes_pending">Changes Pending. &nbsp;</div>
                </div>
            </div>
        </div>
        <div class="row-fluid" id="iframediv" >
            <div class="row-fluid">
                <div class="span3 search-gant-wrapper">
                    <input type="text"  placeholder="<%= __('Filter By')%>..." id="searchgantt" />
                </div>
            </div>

            <div class="gantt-outer-wrapper">
                <div id="ganttwrapper" class="row-fluid">
                    <div id="gantttimescale" class="span12">

                        <div class="clockblock"><div class="timeblock">22:00</div></div>
                        <div class="clockblock"><div class="timeblock">23:00</div></div>
                        <div class="clockblock"><div class="timeblock">00:00</div></div>
                        <div class="clockblock"><div class="timeblock">01:00</div></div>
                        <div class="clockblock"><div class="timeblock">02:00</div></div>
                        <div class="clockblock"><div class="timeblock">03:00</div></div>
                        <div class="clockblock"><div class="timeblock">04:00</div></div>
                        <div class="clockblock"><div class="timeblock">05:00</div></div>
                        <div class="clockblock"><div class="timeblock">06:00</div></div>
                        <div class="clockblock"><div class="timeblock">07:00</div></div>
                        <div class="clockblock"><div class="timeblock">08:00</div></div>
                        <div class="clockblock"><div class="timeblock">09:00</div></div>
                        <div class="clockblock"><div class="timeblock">10:00</div></div>
                        <div class="clockblock"><div class="timeblock">11:00</div></div>
                        <div class="clockblock"><div class="timeblock">12:00</div></div>
                        <div class="clockblock"><div class="timeblock">13:00</div></div>
                        <div class="clockblock"><div class="timeblock">14:00</div></div>
                        <div class="clockblock"><div class="timeblock">15:00</div> </div>
                        <div class="clockblock"><div class="timeblock">16:00</div></div>
                        <div class="clockblock"><div class="timeblock">17:00</div></div>
                        <div class="clockblock"><div class="timeblock">18:00</div></div>
                        <div class="clockblock"><div class="timeblock">19:00</div></div>
                        <div class="clockblock"><div class="timeblock">20:00</div></div>
                        <div class="clockblock"><div class="timeblock">21:00</div></div>
                        <div class="clockblock"><div class="timeblock">22:00</div></div>
                        <div class="clockblock"><div class="timeblock">23:00</div></div>
                        <div class="clockblock"><div class="timeblock">00:00</div></div>
                        <div class="clockblock"><div class="timeblock">01:00</div></div>
                        <div class="clockblock"><div class="timeblock">02:00</div></div>
                        <div class="clockblock"><div class="timeblock">03:00</div></div>
                    </div>

                    <div id="ganttrows" class="row-fluid">

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="flightModal" class="modal modal-lg hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
        <h3 id="myModalFlightLabel"><%= __('Create Flight') %></h3>
    </div>
    <div class="modal-body modal-body-overflow" id="edit_flight_body">
        
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" id="flightchangecancel" aria-hidden="true"><%= __('FormCancel') %></button>
        <button class="btn btn-danger" id="delete_edit_flight"><%= __('FormDelete') %></button>
        <button class="btn btn-primary" id="save_edit_flight"><%= __('FormSave') %></button>
    </div>
</div>

<div id="boardingPassModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
        <h3 id="myModalBoardingPassLabel"><%= __('Boarding Pass') %></h3>
    </div>
    <div class="modal-body modal-body-overflow" id="boarding_pass_body">
        <div id="boarding_pass_details"></div>
        <div id="boarding_pass_manifest_id" class="pull-right"></div>
        <img id="board_pass_js_barcode">
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" id="boardingpasscancel" aria-hidden="true"><%= __('Close') %></button>
        <button class="btn btn-primary" id="print_boarding_pass"><%= __('Print') %></button>
    </div>
</div>

<script type="text/javascript">

	var airlines = <%-JSON.stringify(airlines)%>;
	var airports = <%-JSON.stringify(airports)%>;
    var gantt;       // This is the collection of rows/flights
	var editFlightView = null; // This Backbone View wraps creating/editing new flights.


		
    $(function(){
    	socket.on('connect',initialize);
    
    });
    function initialize(){
    
    
        // binds datetimepicker to the main schedule date input
        // when this date is changed, we fetch the new flights from serverside
        // this triggers render().
        $('#flightdatepicker').initDateTimePicker({ 
	        language:'<%=req.session.user.locale%>', 
	        format:'yyyy-MM-dd',
	        pickTime: false,
	        pick12HourFormat: false,
	        widgetAttribute:'select_flight_date',
	        changeDate:function(e){
	       		gantt.fetch();
	        }
		});
		$('#flightdatepicker').data('datetimepicker').setLocalDate(new Date());
   		
		
		
		$('#add_flight').click(function(){
			var newFlight = {id:null,airline:null,flight_number:null, origin_airport_code:null, destination_airport_code:null};
			//if(editFlightView!=null){
			//	editFlightView.remove();
			//}
			//editFlightView.model.clear();
			editFlightView.model.set(newFlight);
			editFlightView.render();
			$('#myModalFlightLabel').html('<%=__('Create Flight')%>');
			$('#flightModal').modal('show');
	        
		});
		
	        		
		$('#boardingPassModal').modal({show:false}); //backdrop:'static',
		$('#board_pass_js_barcode').JsBarcode('1823902140121');
		
		$('#flightModal').modal({backdrop:'static',show:false});
        $('#flightModal').on('shown',function(e){
        	fixModals();
        });
		$('#flightModal').on('show',function(e){
        	fixModals();
        });
        
        
		//////////////////////////////////////////////////
        //////// GANTT ///////////////////////////////////
        //////////////////////////////////////////////////
        // The gantt collection is created.
        // then ganttView.render() is called to make the graph
        // when the request for the collection is made, date parameter is passed in
        var GanttModel = Backbone.Model.extend({
        	defaults:{
        		deleted:false
    		},
            urlRoot: ''
        });

        var SailsGanttCollection = Backbone.Collection.extend({
            sailsCollection: "",
            socket: null,
            sync: function(method, model, options){
                options.date = $('#flightdatepicker input').val();
                
                var newdate = new Date($('#flightdatepicker input').val());
                
                
                var selectedDate = $('#flightdatepicker').data('datetimepicker').getLocalDate(); 
                selectedDate.setHours(0,0,0,0);
                var yesterday = new Date(selectedDate);
                yesterday.setDate(selectedDate.getDate()-1); 
                var yesterday9pm = new Date(yesterday).setHours(21); 
                var tomorrow = new Date(selectedDate); 
                tomorrow.setDate(selectedDate.getDate()+1); 
                var tomorrow3am = new Date(tomorrow).setHours(3); 

        		options.minDate = new Date(yesterday9pm);
        		options.maxDate = new Date(tomorrow3am);
                
                
                if(typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                    this.socket = socket;

                    this.socket.get(this.sailsCollection, options, _.bind(function(flighttables){
                        if(flighttables.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                        }
                        this.reset(flighttables);
                        //this.set(flighttables);
                        ganttView.render();
                    }, this));
                }
            }
        });

        var GanttCollection = SailsGanttCollection.extend({
            sailsCollection: '/flights/findFlights',
            model: GanttModel
        });

        // creates the collection, it's 'fetch'ed' later
        gantt = new GanttCollection();
		gantt.fetch();

        // this view object builds the graph on the page
        var GantView = Backbone.View.extend({
            el: '#ganttrows',
            initialize: function () {
            },
            events:{
                'click a.progress.ganntbar':'gantClick'
            },
            gantClick:function(event){
                //do_popover(event,false);
                
				var newFlight = this.collection.get($(event.target).attr('flight_id')).toJSON();
				//if(editFlightView!=null){
				//	editFlightView.remove();
				//}
				
				//editFlightView.model.clear();
				editFlightView.model.set(newFlight);
				editFlightView.render();
				$('#myModalFlightLabel').html('<%=__('Flight')%> '+editFlightView.model.get('flight_number'));
				$('#flightModal').modal('show');
            },
            template: _.template($('#ganttrows-template').html()),
            render: function () {
                this.$el.html("");
                var tcollection = this.collection.sortBy(function(message){
                    return message.get("departure_time");
                });
                for(var i=0; i<tcollection.length; i++)
                {
                    var passsearch = true;
                    // skip out ones that do not satisfy search terms
                    var terms = $('#searchgantt').val().split(' ');

                    for(var j=0;j<terms.length;j++){
                        if(terms[j]==""){
                            continue;
                        }
                        if((getPropertybyId(ref_airline_code,'IATA_2_digit_ID',tcollection[i].get('airline')).toString()+tcollection[i].get('flight_number').toString()).toLowerCase().indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_early_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_late_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_locked_out_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                &&("mu"+tcollection[i].get('virtual_on_time_dest').toString()).indexOf(terms[j].toString().toLowerCase())==-1
                                ){
                            passsearch = false;
                        }
                    }
                    if(passsearch){
                        this.$el.append(this.template(tcollection[i].toJSON()));
                    }
                }
                $('#ganttrows .ganttrow:last-child').addClass('lastchild');
                $('#save_flights').css('display','block');
                $('#add_flight').css('display','block');
                /*$('#save_flights').unbind();
                $('#save_flights').click(function(){
                    var params = {flight_plans:gantt.toJSON(),date:$('#flightdatepicker input').val()};

                    socket.get("/flighttable/saveFlightsByCarouselandDate", params,function(data){
                        if(data.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                            return;
                        }
                        
                        if(data.success){
                        	gantt.fetch();
                        	bannerAlert('success','<%=__('FormSuccess')%>','<%=__('All changes saved.')%>');
                        }
                    });
                });
				setChangesPending();*/
                doDate();
            }
        });
         // the view is created here, but the gantt collection is still empty.
        var ganttView = new GantView({collection: gantt});
		
		
		EditFlightModel = Backbone.Model.extend({
		});
		var editFlightModel = new EditFlightModel;
		
		var EditFlightView = Backbone.View.extend({
            el: '#edit_flight_body',
            map: '#editmap_preview_wrapper',
            initialize: function () {
            	//$('.assign-company-checkbox').unbind();
            },
            events:{
                'change #edit_origin_airport':'originPathChanged',
                'change #edit_destination_airport':'destinationPathChanged',
                'change input[model-attribute]':'changeAttribute',// ="flight_number" 
                'change #edit_airline':'airlineChanged',
                'change .assign-company-checkbox':'assignCompany',
                'click #add_pax':'addPassenger'
            },
            addPassenger:function(event){
            	alert('abcdefg');
            	
            	
        	},
            assignCompany:function(event){
            	var mappings = this.model.get('company_mappings');
            	for(var i=0;i<mappings.length;i++){
            		if(mappings[i].id == parseInt($(event.target).attr('company_id'))){
            			mappings[i].assigned = $(event.target).is(':checked')?1:0;
            			break;
            		}
            	}
            	this.model.set('company_mappings',mappings);
            },
            changeAttribute:function(event){
            	this.model.set($(event.target).attr('model-attribute'),$(event.target).val()==''?null:$(event.target).val());
            },
            airlineChanged:function(event){
            	this.model.set('airline',$(event.target).val()==''?null:$(event.target).val());
            },
            updateOrigin:function(updateModel){
            	var timezone = parseInt($('#edit_origin_airport option:selected').attr('timezone'));
            	var airportcode = parseInt($('#edit_origin_airport option:selected').attr('airport_code'));
            	if(isNaN(timezone)){
            		timezone = null;
            		airportcode = null;
            		$('.origin-timezone').html('');
            		$('#edit_flight_origin_datepicker').data('datetimepicker').setValue(null);
            		$('#edit_flight_origin_datepicker').data('datetimepicker').disable();
            		$('#edit_flight_origin_datepicker').trigger('changeDate');
            	}else{
            		$('.origin-timezone').html('<b>(Local GMT '+(timezone>0?'+':'')+timezone+')</b>');
            		$('#edit_flight_origin_datepicker').data('datetimepicker').disable();
            		$('#edit_flight_origin_datepicker').data('datetimepicker').enable();
            	}
            	if(updateModel){
	            	this.model.set('origin_airport_code',airportcode);
	            	this.model.set('origin_timezone', timezone);
            	}
            },
            originPathChanged:function(event){
            
            	this.updateOrigin(true);
            	this.flightPathChanged();
            },
            updateDestination:function(updateModel){
           		var timezone = parseInt($('#edit_destination_airport option:selected').attr('timezone'));
            	var airportcode = parseInt($('#edit_destination_airport option:selected').attr('airport_code'));
            	if(isNaN(timezone)){
            		timezone = null;
            		airportcode = null;
            		$('.destination-timezone').html('');
            		$('#edit_flight_destination_datepicker').data('datetimepicker').setValue(null);
            		$('#edit_flight_destination_datepicker').data('datetimepicker').disable();
            		$('#edit_flight_destination_datepicker').trigger('changeDate');
            	}else{
            		$('.destination-timezone').html('<b>(Local GMT '+(timezone>0?'+':'')+timezone+')</b>');
            		$('#edit_flight_destination_datepicker').data('datetimepicker').disable();
            		$('#edit_flight_destination_datepicker').data('datetimepicker').enable();
            	}
            	if(updateModel){
	            	this.model.set('destination_airport_code',airportcode);
	            	this.model.set('destination_timezone', timezone);
            	}
            },
            destinationPathChanged:function(event){
            	this.updateDestination(true);
            	this.flightPathChanged();
            },
            flightPathChanged:function(event){
                $(this.map).empty();
                
                this.paths = [{
                	origin: ($('#edit_origin_airport').val()==''?null:{latitude:$('#edit_origin_airport option:selected').attr('latitude'),longitude:$('#edit_origin_airport option:selected').attr('longitude')}), 
                	destination :   ($('#edit_destination_airport').val()==''?null:{latitude:$('#edit_destination_airport option:selected').attr('latitude'),longitude:$('#edit_destination_airport option:selected').attr('longitude')}) 
                	}];
                	
                $(this.map).append(this.staticMapTemplate({paths:this.paths}));
                this.updateFlightStats();
            },
            updateFlightStats:function(){
            	var haveOriginAndDesitnation= (this.paths.length>0&&this.paths[0].origin!=null&&this.paths[0].destination!=null);
                var haveDepartureAndArrival = this.model.get('departure_time')!=null&&this.model.get('arrival_time')!=null;
                
                if(haveOriginAndDesitnation){
	                $('#edit_flight_stats_distance').html(geolib.getDistance(
					    {latitude: this.paths[0].origin.latitude, longitude: this.paths[0].origin.longitude}, 
					    {latitude: this.paths[0].destination.latitude, longitude: this.paths[0].destination.longitude}
					));
                }else{
                	$('#edit_flight_stats_distance').html('');
                }
                
                if(haveDepartureAndArrival){
                	var timeDiff = new Date(this.model.get('arrival_time')).getTime()-new Date(this.model.get('departure_time')).getTime();
                	$('#edit_flight_stats_duration').html((timeDiff<0?'<span class="fms-invalid-value">':'')+millisecondsToHoursMinutesSecondsString(timeDiff)+(timeDiff<0?'</span>':''));
                
                }else{
                	$('#edit_flight_stats_duration').html('');
                }
            },
            remove:function(){
            	socket.get('/flights/destroy',this.model.toJSON(),function(response){
            		if(response.error){
            			bannerAlert('error','<%=__('FormError')%>',response.error,$('#flightModal .modal-body'));
            		}else if(response.success){
            			bannerAlert('success','<%=__('FormSuccess')%>','<%=__('Flight Deleted')%>');
            			$('#flightModal').modal('hide');
            			gantt.fetch();
            		}
            	});
            },
            save:function(){
            
            	if(this.model.get('flight_number')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Flight Number')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('airline')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Airline')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('origin_airport_code')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Origin Airport')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('departure_time')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Departure Time')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('destination_airport_code')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Destination Airport')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('arrival_time')==null){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Arrival Time')%>',$('#flightModal .modal-body'));
            	}else if(this.model.get('departure_time')>this.model.get('arrival_time')){
        			bannerAlert('error','<%=__('FormError')%>','<%= __('Invalid Arrival or Departure Time')%>',$('#flightModal .modal-body'));
            	}else{
	            	socket.get('/flights/save',this.model.toJSON(),function(response){
	            		if(response.error){
	            			bannerAlert('error','<%=__('FormError')%>',response.error,$('#flightModal .modal-body'));
	            		}else if(response.success){
	            			bannerAlert('success','<%=__('FormSuccess')%>','<%=__('Flight Saved')%>');
	            			$('#flightModal').modal('hide');
	            			gantt.fetch();
	            		}
	            		
	            		
	            		//alert('some response'+response);
	            		
	            	});
            	}
            },
            passengers : new Backbone.Collection(),
            paths:[],
            template: _.template($('#editflight-template').html()),
            staticMapTemplate: _.template($('#staticmap-template').html()),
            render: function () {
            
            
                this.$el.html("");
            	socket.get('/flights/getCfgCompanyFlightMappings/',{id:this.model.get('id')},_.bind(function(companies){
            		if(companies.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                    	return location.reload(); // Will boot back to login screen
                    }
                    this.model.set('company_mappings',companies);
                    addPassengersList(this.model.get('id'),_.bind(function(err,paxs){
	                    if(paxs!=null&&paxs.error != undefined){ // reloads with flash message or further kicking out user.
	                    	return location.reload(); 
	                    }
                    	this.passengers.set(paxs);
	                    this.$el.append(this.template(this.model.toJSON()));
		                this.postRender();
		                if(paxs){
		                	this.initManifest();
		                }
		                this.flightPathChanged();
                    },this));
            		//this.render();
            	},this));
                
                
                function addPassengersList(flightId, cb){
                	if(flightId==null){
                    	return cb(null,null);
                    }
                	socket.get('/manifests/getandjoinmanifestdetailsbyflight',{id:flightId},function(paxs){
                		if(paxs.error != undefined){ 
	                    	return location.reload(); 
	                    }
	                    cb(null,paxs);
                	});
                }
                
            },
            passengersDatatable:null,
            bindDatatablesRow:function(row,data){
            
            	if(data['boarded']){
            		$(row).addClass('boarded');
            	}
            
            	var manifestDetailsId = data['id'];
            	$(row).attr('manifest_id',manifestDetailsId);
				$(row).find('.checked-in').unbind('click');
	        	$(row).find('.checked-in').click(_.partial(function(self){
	        		self.passengers.get(manifestDetailsId).set('checked_in',($(this).is(':checked')?1:0));
	        		socket.get('/manifests/updaterow',{flight_ID:self.model.get('id'),row:self.passengers.get(manifestDetailsId).toJSON()},function(result){
		        		if(result.error != undefined){
                            location.reload();
                        }
	        		});
	        	},this));
	        	
	        	$(row).find('.remove-pax').unbind('click');
	        	$(row).find('.remove-pax').click(_.partial(function(self){
	        		//alert('hjere');
	        		self.passengers.get(manifestDetailsId).set('deleted',1);
	        		socket.get('/manifests/updaterow',{flight_ID:self.model.get('id'),row:self.passengers.get(manifestDetailsId).toJSON()},function(result){
		        		if(result.error != undefined){
                            location.reload();
                        }
	        		});
	        		
	        		var paxData = editFlightView.passengersDatatable.api().data();
            		for(var i=0;i<paxData.length;i++){
            			if(paxData[i].id==manifestDetailsId){
	        				editFlightView.passengersDatatable.api().row(i).remove().draw();
            				break;
            			}
            		}
	        		
	        	},this));
	        	
	        	$(row).find('.print-pass').unbind('click');
	        	$(row).find('.print-pass').click(_.partial(function(self){
	        	
	        		
	        		$('#boardingPassModal').modal('show');
	        		
	        		$('#boarding_pass_details').empty();
	        		$('#boarding_pass_details').append($(this).closest('tr').children()[0].innerHTML);
	        		
	        		
	        		$('#boarding_pass_manifest_id').empty();
	        		$('#boarding_pass_manifest_id').append($(this).closest('tr').attr('manifest_id'));
	        		
	        		
	        		//$('#board_pass_js_barcode').empty();
	        		
	        	},this));
            },
            initManifest : function(){
            
            	$('#search_contact').isnajaxfield({
            		results:$('#search_contact_results'),
	            	ajax:function(search,cb){
	            		socket.get('/contacts/getcontactsbyname',{search:search},function(result){
	            			if(result.error != undefined){  // result
	                            location.reload(); // result
	                        }
	                        cb(result);
	            		});
	            	},
	            	template:_.template($('#contacts-search-row-template').html()),
	            	click:_.bind(function($row){
	            		socket.get('/manifests/addmanifestdetail',{contact_ID:parseInt($row.attr('contact_id')),flight_ID:this.model.get('id')},function(result){
	            			if(result.error != undefined){  // result
	                            location.reload(); // result
	                        }
	            		});
            		},this)
            	});
            	
            	
            	
            
	            this.passengersDatatable = $('#passengers').dataTable( {
		            language: {
        				search: "",
				        searchPlaceholder: "Filter Manifest"
				    },
		        	"dom":"ftipr",
					"ajax": _.bind(function (data, callback, settings) {
				    	callback({"data":this.passengers.toJSON()});
					},this),
					"aoColumns":[
			        	{"mData":"manifest_ID","visible":false}
			         	,{"mData":function(data,b){ 
			         		return data.first_name + ' ' + data.last_name; }
				        },{"mData":function(data,b){ 
				        	return "<input type=\"checkbox\" "+(data.checked_in?' checked="checked" ':'')+"class=\"checked-in\">"; }
				        },{"mData":function(data,b){ 
				        	return '<div class="btn btn-danger remove-pax">Remove</div>'; }
				        },{"mData":function(data,b){ 
				        	return '<div class="btn btn-success print-pass">Print Boarding Pass</div>'; }
				        }
			        ],
			        "rowCallback": _.bind(function( row, data, displayIndex ) {
			        
			        	//this.passengers.get(data['id']).set('displayIndex',displayIndex);
			        	this.bindDatatablesRow(row,data);
			        	
					},this)
				});
				
				for(var event in  socket.$events){
					if(event.indexOf('manifest')==0){
						socket.removeListener(event,this.manifestEvent);
					}
				}
				socket.on('manifest_'+this.model.get('id'),this.manifestEvent);
				
				//socket.get('/manifests/joinmanifest',this.model.get('
            },
            manifestEvent:function(update){
            	//alert('a');
            	var updateRow = editFlightView.passengers.get(update.id);
            	if(typeof(updateRow)!='undefined'&&!_.isEqual(updateRow.toJSON(),update)){
            		if(update.deleted){
            			editFlightView.passengers.remove(update.id);
            			var paxData = editFlightView.passengersDatatable.api().data();
	            		for(var i=0;i<paxData.length;i++){
	            			if(paxData[i].id==update.id){
		        				editFlightView.passengersDatatable.api().row(i).remove().draw(); // Re-binds All checkboxes?
	            				break;
	            			}
	            		}
            		}else{
	            		updateRow.set(update);
	            		var paxData = editFlightView.passengersDatatable.api().data();
	            		for(var i=0;i<paxData.length;i++){
	            			if(paxData[i].id==update.id){
		        				editFlightView.passengersDatatable.api().row(i).data(update); //update data
		        				if(editFlightView.passengersDatatable.find('tr[manifest_id='+updateRow.get('id')+']').length>0){
			        				editFlightView.bindDatatablesRow(editFlightView.passengersDatatable.find('tr[manifest_id='+updateRow.get('id')+']'),update);
		        				}
	            				break;
	            			}
	            		}
            		}
            	}else if(typeof(updateRow)=='undefined'){  //Adding new passenger (not in list)
            		editFlightView.passengers.add(update);
            		editFlightView.passengersDatatable.api().row.add(editFlightView.passengers.get(update.id).toJSON()).draw();
            	}
            },
            postRender:function(){
            	this.self = this;
                if(mobileDetect.mobile()==null){
	                $('#edit_airline').combobox();
	                $('#edit_origin_airport').combobox();
               		$('#edit_destination_airport').combobox();
                }
                $('#edit_flight_origin_datepicker').initDateTimePicker({ 
			        language:'<%=req.session.user.locale%>', 
			        format:'yyyy-MM-dd hh:mm',
			        pickTime: true,
            		pickSeconds: false,
			        widgetAttribute:'edit_flight_origin_datepicker'+Math.floor(Math.random()*99999),
	        		appendTo:'#flightModal .modal-body',
			        changeDate:$.proxy(function(e){
			        	if(this.model.get('origin_timezone')!=null&&$('#edit_flight_origin_datepicker').data('datetimepicker').getLocalDate()!=null){
			        		// Get UTC date and shift back and forth appropriately out of local timezone into airport timezone retreiving relative UTC string.
				        	var elementDate = $('#edit_flight_origin_datepicker').data('datetimepicker').getLocalDate();
				        	elementDate.setTime(elementDate.getTime()-(new Date().getTimezoneOffset()*60000));
				        	elementDate.setTime(elementDate.getTime()-(parseInt(this.model.get('origin_timezone'))*60*60000));
				        	this.model.set('departure_time',elementDate.toISOString());
				        	this.updateFlightStats();
			        	}else{
			        		this.model.set('departure_time',null);
		        		}
			        },this)
				});
				if(this.model.get('departure_time')==null||this.model.get('origin_airport_code')==null){
					$('#edit_flight_origin_datepicker').data('datetimepicker').disable();
				}else{
					var elementDate = new Date(this.model.get('departure_time'));
		        	elementDate.setTime(elementDate.getTime()+(parseInt(this.model.get('origin_timezone'))*60*60000));
		        	elementDate.setTime(elementDate.getTime()+(new Date().getTimezoneOffset()*60000));
					$('#edit_flight_origin_datepicker').data('datetimepicker').setLocalDate(elementDate);
					this.updateOrigin(false);
				}
				
				$('#edit_flight_destination_datepicker').initDateTimePicker({ 
			        language:'<%=req.session.user.locale%>', 
			        format:'yyyy-MM-dd hh:mm',
			        pickTime: true,
            		pickSeconds: false,
			        widgetAttribute:'edit_flight_destination_datepicker'+Math.floor(Math.random()*99999),
	        		appendTo:'#flightModal .modal-body',
			        changeDate:$.proxy(function(e){
			       		if(this.model.get('destination_timezone')!=null&&$('#edit_flight_destination_datepicker').data('datetimepicker').getLocalDate()!=null){
			        		// Get UTC date and shift back and forth appropriately out of local timezone into airport timezone retreiving relative UTC string.
				        	var elementDate = $('#edit_flight_destination_datepicker').data('datetimepicker').getLocalDate();
				        	elementDate.setTime(elementDate.getTime()-(new Date().getTimezoneOffset()*60000));
				        	elementDate.setTime(elementDate.getTime()-(parseInt(this.model.get('destination_timezone'))*60*60000));
				        	this.model.set('arrival_time',elementDate.toISOString());
				        	this.updateFlightStats();
			        	}else{
			        		this.model.set('arrival_time',null);
		        		}
			        },this)
				});
				if(this.model.get('departure_time')==null||this.model.get('destination_airport_code')==null){
					$('#edit_flight_destination_datepicker').data('datetimepicker').disable();
				}else{
					var elementDate = new Date(this.model.get('arrival_time'));
		        	elementDate.setTime(elementDate.getTime()+(parseInt(this.model.get('destination_timezone'))*60*60000));
		        	elementDate.setTime(elementDate.getTime()+(new Date().getTimezoneOffset()*60000));
					$('#edit_flight_destination_datepicker').data('datetimepicker').setLocalDate(elementDate);
					this.updateDestination(false);
				}
				
				
				$("#preview_flight_summary_collapse_handle").click(function(){
				    $(this).children('i').toggleClass("icon-collapse-alt icon-expand-alt");
				    
				    if($(this).children('i').hasClass('icon-collapse-alt')){
				    	$('#flightModal').find('.modal-header').css('border-bottom','1px solid #eee');
			    	}else{
				    	$('#flightModal').find('.modal-header').css('border-bottom','none');
			    	}
				});
            }
        });
        editFlightView  = new EditFlightView({model:editFlightModel});
        
        
        $('#save_edit_flight').click(function(){
        	editFlightView.save();
    	});
    	
    	$('#delete_edit_flight').click(function(){
    		editFlightView.remove();
    	});
		
		
    	$(window).resize(function(){resizegantt()});
    	resizegantt();
	}
	
	
	
	// This function updates the current time indicator line
    function doDate(){
        $('.current-time-line').remove();
        $('.current-time-block').remove();
        var selectedDate = $('#flightdatepicker').data('datetimepicker').getLocalDate();
        selectedDate.setHours(0,0,0,0);
        var yesterday  = new Date(selectedDate);
        yesterday.setDate(selectedDate.getDate()-1);
        var yesterday9pm = new Date(yesterday).setHours(21);
        var tomorrow = new Date(selectedDate);
        tomorrow.setDate(selectedDate.getDate()+1);
        var tomorrow3am = new Date(tomorrow).setHours(3);

        var today_date = new Date();
        if(selectedDate.getFullYear() == today_date.getFullYear()&&selectedDate.getMonth() == today_date.getMonth()&&selectedDate.getDate() == today_date.getDate()){
            var heit = $('#ganttwrapper').height();
            $('#ganttwrapper').append('<div class="current-time-line" style=" height:'+ heit+'px; left:'+ 100*(today_date.getTime() - yesterday9pm)/(tomorrow3am- yesterday9pm)+'%;"></div>');
            $('#ganttwrapper').append('<div class="current-time-block" style="width:40px; left:' + (100*(today_date.getTime() - yesterday9pm)/(tomorrow3am- yesterday9pm))+'%;"><div class="time-spot">'+padLeft(today_date.getHours(),2)+':'+padLeft(today_date.getMinutes(),2)+'</div><div class="icon-spot"><i class="icon-circle-arrow-down"></i></div></div>');
        }
    }
    setInterval(doDate,60000);
    
    
	
	
	// this resizegantt function corrects the header sizing, font size/weight
    // it also corrects positioning of the popvers and datetimepickers
     function resizegantt(){
        var elsize=0;
        var fsize = 0;
        $('.timeblock').each(function(){
            if(elsize ==0)
            {
                elsize= 1.786*$(this).parent().width()-8+'px'
            }
            if(fsize ==0){
                fsize = 0.15*$(this).parent().width()+7.65+'px';
            }
            $(this).css('line-height',elsize);
            $(this).css('font-size',fsize);

        });

    }
	
</script>
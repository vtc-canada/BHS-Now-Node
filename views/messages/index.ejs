
<div class="row-fluid">
    <!-- Left Side Messages list Section -->
    <div class="span4 messages-left">
        <div class="row-fluid">
            <div class="span11 offset1">
                <div class="messageslistheader"><%= __('Inbox') %></div>

                <div id="messagesListWrapper" >
                    <div id="newMessageButton" ><%= __('Message User') %> <i class="icon-plus"></i></div>
                    <div id="messageslistsection">

                    </div>

                </div>
            </div>
        </div>
    </div>

    <!-- Right side Full conversation container section -->
    <div class="span8 messages-right">
	    <div class="row-fluid">
	        <div class="span10 offset1">
	            <div id="messagesFullName" class="messageslistheader">
	                <select id="type_names_combo" style="display:none;" class="type-names-combo">
	                    <option value=""></option>
	                </select>
	                <div id="messagesFullNamediv"></div>
	            </div>
	
	
	            <div id="messagesFullWrapper">
	            </div>
	            <div class="messageinputwrapper">
	                <div class="textareawrapper">
	                    <textarea disabled="disabled" class="inputtexttextarea" id="fullmessagetextarea"></textarea>
	                </div>
	            </div>
	        </div>
	    </div>
    </div>
</div>


<!-- Template for recent messages list on the left -->
<script type="text/template" id="messagesList">
    {{ /*var otheruserID; if(touserId!=userID){ otheruserID = touserId; } else { otheruserID = userID; }*/ }}
    <li class="{{ if(!seen && toUserId==<%=req.session.user.id%>){ }}unread{{ } }}" otherusername="{{= users.get(joinuserId).get('username') }}" otheruserId="{{= joinuserId }}" createdAt="{{= createdAt}}">
        <a class="messagelistbox">
            <div class="messagelistboxwrapper">
                <div class="messagelisttopwrapper">
                    <div class="messagelistname pull-left">
                        {{= users.get(joinuserId).get('username') }}
                    </div>
                    <div class="messagelistdate pull-right">
                        {{=toLocaleDateTimeString(createdAt)}}
                    </div>
                </div>
                {{ if(toUserId!=<%=req.session.user.id%>){ }}<i class="message-list-icon icon-reply"></i>{{ }else{ }}<i class="message-list-icon icon-share-alt"></i>{{ } }}
                <div class="messagelisttext">
                     {{= message}}
                </div>
                <div class="badgeunread"><span class="badge badge-important">1</span></div>
            </div>
        </a>
    </li>
</script>


<!-- Template for conversation messages on the right -->
<script type="text/template" id="messagesFull">
    <li class="{{ if(!seen){ }}unread{{ } }}" message_id="{{= id}}">
        <a class="messagefullbox">
            <div class="messagefullboxwrapper">
                <div class="messagefulltopwrapper">
                    <div class="messagefullname pull-left">{{= users.get(fromUserId).get('username') }}</div>
                    <div class="messagefulldate pull-right">
                        {{= toLocaleDateTimeString(createdAt)}}
                    </div>
                </div>
                <div>
                    {{= message}}
                </div>
            </div>
        </a>
    </li>
</script>


<script>


    var messageslist;  // collection - stores the recent messages list
    var messagesfull;  // collection - stores the conversation messages

    ////////////////////////////////////
    //// Fill Users Combo-box //////////
    ////////////////////////////////////
    // Utility function
    // fills the users dropdown box
    // binds change' handler- to read messages, and pull the fetch the messages and fill the conversation window
    // notifies server the conversation has been read
    function fillautocompletebox(){
        users.each(function(user){
            if(user.get('username')!='<%=req.session.user.username%>'){
                $('#type_names_combo').append('<option value="'+user.get('id')+'">'+user.get('username')+'</option>');
            }
        },this);
        $('#type_names_combo').combobox();
        $('input.type-names-combo').css('display','none');
        $('span.dropdown-toggle').css('display','none');

        $('input.type-names-combo').change(function(e){
            setTimeout(function(){
                if($('input.type-names-combo').val()!=''){
                    $('input.type-names-combo').css('display','none');
                    $('span.dropdown-toggle').css('display','none');

                    $('#messagesListWrapper li').removeClass('selected');

                    $('#messageslistsection li[otheruserid='+$('input.type-names-combo').prev().val()+']').addClass('selected');
                    fulluserIDselected =  $('input.type-names-combo').prev().val();
                    loadpreviousID = 0;

                    var numIdt = parseInt($('input.type-names-combo').prev().val());
                    users.get(numIdt).unset('unreadmessages');
                    updateBadge();
                    socket.get("/readmessage",{readfromid:$('input.type-names-combo').prev().val()},function(msg){
                        if(msg.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                        }
                    });
                    messagesfull.fetch({otherUserId:numIdt});
                }
            },20);
        });
    }

    //////////////////////////
    ////// DOCUMENT READY  ///
    //////////////////////////
    //$(document).ready(function () {
      function initialize(){
         var loadpreviousID=0; // coordinates with layout, tracking the selected user

        $('#newMessageButton').click(function(){
            $('#fullmessagetextarea').attr('disabled','disabled');
            $('#messagesFullWrapper').unbind();
            $('#messagesFullWrapper').html('');
            $('input.type-names-combo').val('');
            $('input.type-names-combo').css('display','block');
            $('span.dropdown-toggle').css('display','block');

            if($('div.combobox-container.combobox-selected').length>0){
                $('div.combobox-container > span.add-on').trigger('click');
            }
            $('div.combobox-container > span.add-on').trigger('click');

            $('input.type-names-combo').focus();
        });

        ///////////////////////////////////////////////////
        //////////////////  MESSAGES //////////////////////
        ///////////////////////////////////////////////////
        // Backbone calls to messages
        // view renders on  'Set' event only
        // Seperate message handling is used to slot in updates to the message list
        var MessagesListModel = Backbone.Model.extend({
            urlRoot: ''
        });

        var SailsMessagesListCollection = Backbone.Collection.extend({
            sailsCollection: "",
            socket: null,
            sync: function (method, model, options) {
                if (typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                    this.socket = socket;
                    //this.socket.on("connect", _.bind(function () {
                        this.socket.get("/" + this.sailsCollection, options, _.bind(function (msglist) {
                            if(msglist.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                                location.reload(); // Will boot back to login screen
                            }
                            this.set(msglist);
                        }, this));
                    //}, this));
                }
            }
        });

        var MessagesListCollection = SailsMessagesListCollection.extend({
            sailsCollection: 'messages/findDistinct',
            model: MessagesListModel
        });

        messageslist = new MessagesListCollection();
        messageslist.fetch();

        // messageslistview
        // on render, handlers are put in, similar to the chatboxes.
        // to both switch and populate conversations, and to notify serverside that messages are read.
        var MessagesListView = Backbone.View.extend({
            el: '#messageslistsection',
            initialize: function () {
                this.collection.on('add', this.render, this);
                this.render();
            },
            template: _.template($('#messagesList').html()),
            render: function () {
                this.$el.html("");
                var tcollection = this.collection.sortBy(function(user){
                    return user.get("createdAt");
                });
                for(var i=0; i<tcollection.length; i++)
                {
                   this.$el.prepend(this.template(tcollection[i].toJSON()))
                }

                $('a.messagelistbox').click(function(){

                    $('#messagesListWrapper li').removeClass('selected');
                    $(this).parent().addClass('selected');
                    fulluserIDselected =  $(this).parent().attr('otheruserId');
                    loadpreviousID = 0;

                    var numIdt = parseInt($(this).parent().attr('otheruserId'));
                    users.get(numIdt).unset('unreadmessages');
                    updateBadge();
                    socket.get("/chat/seenmessage",{fromUserId:numIdt},function(msg){
                        if(msg.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                        }
                    });
                    messagesfull.fetch({otherUserId:numIdt});
                    $('.messageinputwrapper').css('display','block');
                    $('input.type-names-combo').css('display','none');
                    $('span.dropdown-toggle').css('display','none');
                });
            }
        });
        var mLView = new MessagesListView({collection: messageslist});


        /// Main Message Screen
        ///  This is a second and duplicate handler to receiving messages sent to YOU from serverside
        //  it replaces the messagelist box on the left
        // it adds the message to the chat window triggering render.
        socket.on('<%=req.session.user.id%>',function(data){
        	if(data.message){
        		var message = data.message;
	            if((fulluserIDselected==message.toUserId&&<%=req.session.user.id%>==message.fromUserId)||(fulluserIDselected==message.fromUserId&&<%=req.session.user.id%>==message.toUserId)){
	                messagesfull.add(message);
	                // TODO MAY WANT TO BLOCK RENDER AND MANUALLY ADD MESSAGE HERE - otherwise it's always redrawing the ENTIRE chat every time you get one message
	            }
	
	            var otheruserID;
	            if(message.fromUserId!=<%=req.session.user.id%>){     // not from me
	                otheruserID = message.fromUserId;               //from whoever
	            }
	            else{ // FROM ME
	                otheruserID = message.toUserId;    //to whoever
	            }
	
	            messageslist.remove(messageslist.where({joinuserId:otheruserID}));
	            message.joinuserId = otheruserID;
	            messageslist.add(message);      //triggers render().
            }
            if(data.seen){
            	if(data.seen.fromUserId){ //Means its from me
		            $('li.unread[otheruserId='+data.seen.fromUserId+']').removeClass('unread');
		
		            if(messageslist.where({joinuserId:parseInt(data.seen.fromUserId)}).length>0){
		                messageslist.where({joinuserId:parseInt(data.seen.fromUserId)})[0].set({seen:1});
		            }
            	}
            }
        });


        ///////////////////////////////////////
        //// Conversation Window //////////////
        ///////////////////////////////////////
        /// When messages are received,they are automatically trigger render from the view
        // when messages are first read, render is blocked untill all the messages are loaded in
        // then it is rendered once.
        var MessagesFullModel = Backbone.Model.extend({
            urlRoot: ''
        });

        var SailsMessagesFullCollection = Backbone.Collection.extend({
            sailsCollection: "",
            socket: null,
            sync: function (method, model, options) {
                if (typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                    this.socket = socket;
                    //this.socket.on("connect", _.bind(function () {

                    this.socket.get("/" + this.sailsCollection, options, _.bind(function (msgs) {
                        if(msgs.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                            location.reload(); // Will boot back to login screen
                        }
                        this.reset();
                        mFullView.blockrender = true;
                        this.set(msgs);
                        mFullView.blockrender = false;
                        mFullView.render();
                    }, this));

                    this.socket.on("message", _.bind(function(msg){
                        if(msg.model!='messages'){
                            return;
                        }
                        var m = msg.verb;
                        if (m === "create") {
                            if(true)
                            {
                                this.add(msg.data);
                            }
                        }
                    }, this));

                }
            }
        });

        var MessagesFullCollection = SailsMessagesFullCollection.extend({
            sailsCollection: 'messages/findUserMessages',
            model: MessagesFullModel
        });

        messagesfull = new MessagesFullCollection();

        ////////////////////////////////
        /// Conversation view //////////
        ////////////////////////////////
        // On render, the conversation is redrawn
        // also, the scroll handler is attached
        // The messagebox is also resized
        var MessagesFullView = Backbone.View.extend({
            el: '#messagesFullWrapper',
            blockrender:false,
            initialize: function () {
                this.collection.on('add', this.render, this);
            },
            template: _.template($('#messagesFull').html()),
            render: function () {
                if(this.blockrender){
                    return;
                }

                $('#fullmessagetextarea').removeAttr('disabled');
                $('#messagesFullWrapper').unbind();
                $('#messagesFullWrapper').scrollTop(0);

                this.$el.html("");
                var tcollection = this.collection.sortBy(function(message){
                    return message.get("createdAt");
                });
                for(var i=0; i<tcollection.length; i++)
                {
                    this.$el.append(this.template(tcollection[i].toJSON()));
                }
                loadpreviousID=fulluserIDselected;
                $('#messagesFullName #messagesFullNamediv').html(users.get(fulluserIDselected).get('username'));

                $('#messagesFullWrapper').scrollTop($('#messagesFullWrapper').get(0).scrollHeight);

                var checkopen = false;
                for(var i =0; i<showList.length; i++){
                    if(fulluserIDselected==parseInt(showList[i].substring(8,showList[i].length))){
                        checkopen = true;
                    }
                }
                if(!checkopen){
                    $('#fullmessagetextarea').focus();
                }

                setTimeout(function(){
                    $('#messagesFullWrapper').scroll(function(){
                        if($('#messagesFullWrapper').scrollTop()==0){
                            var getdatecollection = messagesfull.sortBy(function(message){
                                return message.get("id");
                            });
                             socket.get("/chat/loadpreviousmessagesPriorId",{boxId:fulluserIDselected,priorID:parseInt(getdatecollection[0].get('id'))},function(msgs){
                                 if(msgs.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                                     location.reload(); // Will boot back to login screen
                                 }
                                 if(msgs.length==0){
                                     $('#messagesFullWrapper').unbind();
                                     mFullView.$el.prepend('<div class="no-more-messages" style="margin-top: -10px;margin-left: 9px;font-size: 12px; color: #999;font-style: italic; margin-bottom: 4px;"><%= __('End of messages') %></div>');
                                     return;
                                 }
                                 var scrollsaveid = $('#messagesFullWrapper li:first-child').attr('message_id');
                                 mFullView.blockrender = true;
                                 for(var i=0; i<msgs.length; i++){
                                 	 //msgs[i].createdAtString = toLocaleDateTimeString(msgs[i].createdAt);
                                     messagesfull.add(msgs[i]);
                                     mFullView.$el.prepend(mFullView.template(messagesfull.get(msgs[i].id).toJSON()));
                                 }
                                 mFullView.blockrender = false;
                                 $('#messagesFullWrapper').scrollTop($('#messagesFullWrapper li[message_id='+scrollsaveid+']').position().top);
                             });
                        }
                    });
                },0);
                resizemessages();
            }
        });
        var mFullView = new MessagesFullView({collection: messagesfull});


        // triggers sendtousername like chatboxes on layout.ejs
        // triggered by ENTER key
        // resizes the window for good measure
        $("#fullmessagetextarea").keyup(function(event){
            if(event.keyCode == 13 && !event.shiftKey){

                socket.get('/chat/sendmessage',{toUserId:fulluserIDselected,message:$('#fullmessagetextarea').val()},function(data){
                    if(data.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                        location.reload(); // Will boot back to login screen
                    }
                });
                $('#fullmessagetextarea').val('');
            }
        });
		var resizemessages = function (){
	        $('#messagesFullWrapper').height($(window).height()-$('#messagesFullWrapper').offset().top-163);
	
	    }
        resizemessages();
		$(window).resize(function(){resizemessages()});
	    //Resize - keeps the conversation window the right height compared to the screen - layout patch-work
	    
    };

    

</script>

<!-- Page Parameters Section -->
<div class="row-fluid create-report-controls-wrapper">
    <div class="row-fluid">
        <div class="span3 offset1 reports-criteria-banner" style="
    padding-top: 20px;  font-size: 18px;    line-height: 28px;  color: #676767;  font-weight: 900;  padding-bottom: 20px;
"><%= i18n(req,'Reports Criteria') %></div>
    </div>
    <div class="row">
        <div class="span5 offset2 create-report-controls">
           <div class="rowfluid">
               <div class="row">
                   <div class="span4 report-control-left-label"><label for="reporttype"><%= i18n(req,'Report Type') %>:</label></div>
                   <div class="span8 report-control-right-control">

                       <select id="reporttype">
                       </select>
                   </div>
               </div>

               <div class="row prependparams">
               </div>
           </div>
        </div>

        <div class="span1 reports-arrow-wrapper">
            <i class="icon-circle-arrow-right icon-3x"></i>
        </div>
        <div class="span3 reports-controls-right-wrapper">
            <div id="runreport" class="btn btn-primary runreports"><%= i18n(req,'Run Report') %><div style="display:none;" id="reportcogspace">&nbsp&nbsp</div><i id="runreportcog" style="display:none;" class="icon icon-cog icon-spin"></i></div>
        </div>
    </div>
</div>

<!-- print report Modal -->
<div id="printModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="myModalLabel">Print Report</h3>
    </div>
    <div class="row-fluid" style="padding: 15px; padding-bottom:0px;"><p>Please choose a printer:</p></div>
    <div class="modal-body" style="padding-top: 8px;">
        <p>One fine body…</p>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
        <button id="btnDoPrint" class="btn btn-primary">Print<i id="printcog" style="display:none;" class="icon icon-cog icon-spin"></i></button>
    </div>
</div>

<!-- save report Modal -->
<div id="saveModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="myModalLabelsave">Save Report</h3>
    </div>
    <div class="row-fluid" style="padding: 15px; padding-bottom:0px;"><p>Please choose which format you would like to save your report as:</p></div>
    <div class="modal-body" style="padding-top: 8px;">
        <p>One fine body…</p>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
    </div>
</div>


<!-- Main report section -->
<div class="row-fluid iframe-wrapper">
     <div class="span10 offset1 iframe-border">
         <div class="row-fluid">
             <div id="reportheader" class="span12 iframe-header report-heading-pad">
                 <span id="report-header-name"><%= i18n(req,'Report Header') %></span>
                 <a href="#printModal" role="button" data-toggle="modal" id="promptprint" class="pull-right btn btn-primary" style="display:none; font-weight:400; margin-right:10px;">Print&nbsp<i class="icon icon-print"></i></a>
                 <a href="#saveModal" role="button" data-toggle="modal" id="savemodalbtn" class="pull-right btn btn-primary" style="display:none; font-weight:400; margin-right:10px;">Save&nbsp<i class="icon icon-save"></i></a>
             </div>
             <div id="iframediv" style="visibility:hidden;" class=" row-span12" src=""></div>
         </div>
     </div>
</div>

<script>

    
    
    var reportsets={};
	reportsets['eqp_ids']= <%- typeof(eqp_ids)=='undefined'?'[]':JSON.stringify(eqp_ids) %>;
    reportsets['intervals'] = [{id:3600,name:'<%=i18n(req,'1 Hour')%>'},{id:1800,name:'<%=i18n(req,'30 Minutes')%>'},{id:900,name:'<%=i18n(req,'15 Minutes')%>'}];
    /// Hardcoded Report Types.
    // Serverside knows how to handle and what to expect based on the reports ID
    // Adding a report here will make all the clientside work, following the parameter types conventions
    // Serverside must be implemented for new reports
    var reports = <%- JSON.stringify(reports[req.url]) %>;
    var global_config = <% if(typeof(global_config)=='undefined'){ %>{}<% }else{ %><%- JSON.stringify(global_config) %><% } %>;
    function getConfig(description,field){
    	var resultset = $.grep(global_config,function(e){ return e.description==description;});
    	if(resultset.length==0){
    		return '';
    	}
    	else{
    		return resultset[0][field];
		}
    }
	var maxRecords = 1000;
    var printers;       // stores printers list
    var filename;       // stores filename of generated report
    var operational_day_start_time = getConfig('operational_day_start_time','time_val');
    
    
    
    
    typeof(global_config.operational_day_start_time)!='undefined'?global_config.operational_day_start_time:''; // config  operational_day_start_time for setting Start Time: parameter
    var system_name = typeof(global_config.system_name)!='undefined'?global_config.system_name:'System Name';   // Airport name
    var fault_types = <% if(typeof(fault_types)=='undefined'){ %>[]<% }else{ %><%- JSON.stringify(fault_types) %><% } %>;//  for parameters of type 'fault'
    
    
    
    
    $(document).ready(function(){

        /// Activates serverside printing.
        /// It passes in the filename and the printer name
        // it makes appropriate success/error alerts.
        $('#btnDoPrint').click(function(){
            $('.printerror').remove();
            if($(this).hasClass('disabled')){
                return;
            }
            $('#printcog').css('display','inline-block');

            //printers
            socket.get("/reports/printreport" , {printer:getPrinterById(parseInt($('#printerselect').val())),filename:filename},function(response){
                if(response.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                    location.reload(); // Will boot back to login screen
                }
                if(response.failure!=undefined){
                    $('#printModal .modal-body').append('<div class="printerror"><%= i18n(req,'PrintError') %></div>');
                    $('#printcog').css('display','none');
                    return;
                }
                $('#printcog').css('display','none');

                if(response=='success'){


                    //$('#printModal').modal('hide');
                    $('#printModal > div.modal-header > button.close').trigger('click');
                    $('.alert-info').remove();
                    setTimeout(function(){
                        $('.page-banner').after(
                                '<div class="alert alert-info in fade" style="border-radius:0px;">'+
                                        '<button type="button" class="close" data-dismiss="alert">×</button>'+
                                        '<strong>Success:</strong> '+
                                        'Your report has been sent to '+getPrinterById(parseInt($('#printerselect').val())).printername +
                                        '</div>');

                        setTimeout(function(){
                            setTimeout(function(){
                                $('.alert-info').remove();
                            },500);
                            $('.alert-info').removeClass('in');
                        },alert_fadeout_time);
                    },300);
                }

            });
        });

        /// This handler triggers when the user clicks the Print button.
        // This assembles the report parameter values into the report object
        // this object is passed serverside, to generate the actual report file.
        // it responds with a list of printers, and the filename that was generated.
        $('#printModal').on('show',function(){

            $('#printModal .modal-body').empty();
            $('#printModal .modal-body').append('<div style="font-size: 16px; font-weight:400; text-align:right;" class="pull-right"><span class=""><i class="icon icon-cog icon-spin"></i></span>&nbsp&nbspGenerating Report...&nbsp</div>');
            $('#btnDoPrint').removeClass('disabled').addClass('disabled');

            var report = getReportById(parseInt($('#reporttype').val()));

            $.each(report.parameters,function(key,param){
                report.parameters[key].value = $('#'+key).val();
            });
            socket.get("/reports/promptprint" , {report:report},function(response){
                if(response.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                    location.reload(); // Will boot back to login screen
                }
                printers = response.printers;
                filename = response.filename;

                $('#printModal .modal-body').empty();
                $('#printModal .modal-body').append('<select style="width:100%;" id="printerselect"></select>');

                for(var i=0; i<printers.length;i++){
                     $('#printerselect').append('<option value="'+printers[i].id+'" >'+printers[i].printername+'</option>');
                }
                $('#btnDoPrint').removeClass('disabled');
            });
        });


        /// This handler triggers when the user clicks the Save button.
        // This assembles the report parameter values into the report object
        // this object is passed serverside, to generate the actual report files.
        // it responds with a filename for the pdf and csv reports.
        // links to download the files are assembled
        $('#saveModal').on('show',function(){

            $('#saveModal .modal-body').empty();
            $('#saveModal .modal-body').append('<div style="font-size: 16px; font-weight:400; text-align:right;" class="pull-right"><span class=""><i class="icon icon-cog icon-spin"></i></span>&nbsp&nbspGenerating Report...&nbsp</div>');
            $('#btnDoPrint').removeClass('disabled').addClass('disabled');

            var report = getReportById(parseInt($('#reporttype').val()));

            $.each(report.parameters,function(key,param){
                report.parameters[key].value = $('#'+key).val();
            });
            socket.get("/reports/promptsave" , {report:report},function(response){
                if(response.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                    location.reload(); // Will boot back to login screen
                }
                $('#saveModal .modal-body').empty();
                $('#saveModal .modal-body').append('<a href="'+response.pdfurl+'" class="saveformat btn btn-success pull-right" style="margin-right:10px;" download>PDF&nbsp&nbsp</a><a href="'+response.csvurl+'" class="saveformat btn btn-success pull-right"  style="margin-right:10px;" download>CSV&nbsp&nbsp</a>');

                $('.saveformat').click(function(){
                    $('#saveModal > div.modal-header > button.close').trigger('click');
                });
            });
        });



         
		$('#runreport').click(function(){
			runReport();
		});


        // This fills the reporttype dropdown the first and only time.
        for(var i=0; i< reports.length; i++){
            $('#reporttype').append('<option value="'+reports[i].id+'">'+reports[i].name.locale_label['<%=req.session.user.locale%>']+'</option>');
        }
        
		rebuildParams();
    });



    // This function builds the HTML based on the report type that is selected.
    // It has specific handling for datetime, select,fault,checkboxes, and even dependant and parent fields
    // It connects in AJAX calls to populate dependants- pulled from the reports object defined at the top
    rebuildParams = function(){
        $('.paramrows').remove();

        var report = getReportById(parseInt($('#reporttype').val()));

        $.each(report.parameters, function(key, param) {

            var hidden = false;
            var rowtext = '';
            var disabledtext = '';
            if(typeof(param.parent)!='undefined'){
            	if(typeof(report.parameters[param.parent].dependant[key].disabled)!='undefined'){  //disabled type extra param
            		disabledtext = 'disabled="disabled"';
            	}else{  // hidden type extra param
                	rowtext = 'style="display:none;"';
            	}
            }
            
            var htmlappend = '<div class="row paramrows" '+rowtext + ' >';
            htmlappend    +='<div class="span4 report-control-left-label"><label for="'+key+'">'+param.locale_label['<%=req.session.user.locale%>']+':</label></div>';

            if(param.type=='datetime'){
                var classtag='';
                if(key=='start_time'){
                    classtag = 'operation-start-datetimepicker-gen';
                }
                else{
                    classtag = 'datetimepicker-gen';
                }
                htmlappend += '<div class="input-append span8 report-control-right-control '+classtag+'">' +
                        '<input data-format="yyyy-MM-dd" id="'+key+'" type="text" value="" '+disabledtext+'>'+
                        '<span class="add-on">'+
                        '<i data-time-icon="icon-time" data-date-icon="icon-calendar"> </i> '+
                        '</span>'+
                        '</div>';
            }else if(param.type=='fault'){
                htmlappend += '<div class="input-append span8 report-control-right-control">' +
                        '<select id="'+key+'" >';
                htmlappend += '<option value="" >&ltAll&gt</option>';
                for(var i=0; i<fault_types.length;i++){
                    htmlappend += '<option value="'+fault_types[i].id+'" >'+fault_types[i].text+'</option>';
                }
                htmlappend +=  '</select>'+
                        '</div>';
            }
            else if(param.type=='select')
            {
                var dependant_info = typeof(param.dependant)!='undefined'?'dependant="dependant" ':''; // dependant_url="'+param.dependant_url+'"
                htmlappend += '<div class="input-append span8 report-control-right-control">' +
                        '<select id="'+key+'" ' + dependant_info + ' '+disabledtext+'>';
                if(key!='interval'){
                	htmlappend += '<option value="" >&ltAll&gt</option>';
                }
                if(typeof(param.source)!='undefined'){
                    for(var i=0; i<reportsets[param.source].length;i++){
                        htmlappend += '<option value="'+reportsets[param.source][i].id+'" >'+reportsets[param.source][i].name+'</option>';
                    }
                }
                htmlappend +=  '</select>'+
                        '</div>';
            }
            else if(param.type=='checkboxes')
            {
                htmlappend += '<div class="input-append span8 report-control-right-control">';
                $.each(param.checkboxes, function(checkboxkey, checkboxparam) {
                    htmlappend += '<div><input class="input-gen-checkbox" checked="checked" style="display:inline;" parent="'+key+'" type="checkbox" id="'+checkboxkey+'"><label style="display:inline;" for="'+checkboxkey+'">&nbsp'+checkboxparam.locale_label['<%=req.session.user.locale%>']+'</label></div>'
                });
                htmlappend += '</div>';
            }else if(param.type=='text'){
	            htmlappend += '<div class="input-append span8 report-control-right-control">';
	            htmlappend += '<input value="'+((typeof(param.post_value)!='undefined')?'<%=typeof(search_field)!='undefined'?search_field:''%>':'')+'" class="input-gen-checkbox" style="display:inline;" type="text" id="'+key+'">'
	            htmlappend += '</div>';
	        }
            htmlappend +='</div>';
            $('.prependparams').before(htmlappend);
            $('.paramrows select').combobox();
        });



          var nowDatetime =  new Date();
          //var timevalue =  toLocaleDateTimeString(nowDatetime);
          var timevalue =  to_operational_day_start_time(nowDatetime,operational_day_start_time);
          var CheckDate = dateFromlocalISO(timevalue);
          if(nowDatetime < CheckDate){
            CheckDate.setDate(CheckDate.getDate()-1);
          }
          


        $(".operation-start-datetimepicker-gen" ).datetimepicker({
            language: 'en',
            format: 'yyyy-MM-dd hh:mm',
            pick12HourFormat: false,
            pickSeconds: false
        }).data('datetimepicker').setLocalDate(CheckDate);


        $(".datetimepicker-gen" ).datetimepicker({
            language: 'en',
            format: 'yyyy-MM-dd hh:mm',
            pick12HourFormat: false,
            pickSeconds: false
        }).data('datetimepicker').setLocalDate(new Date());

        $('.bootstrap-datetimepicker-widget > div > div.close-datetime').click(function(){
            $(".datetimepicker-gen" ).data('datetimepicker').hide();
            $(".operation-start-datetimepicker-gen" ).data('datetimepicker').hide();
        });

        $('select[dependant]').unbind();
        $('select[dependant]').change(function(){
			var $self = $(this);
			//reports[getReportById(parseInt($('#reporttype').val()))].parameters[$(this).attr('id')]
			$.each(getReportById(parseInt($('#reporttype').val())).parameters[$(this).attr('id')].dependant,function(key,param){
			
				var $dependant =   $('#'+key);
	            
	            if($self.val()==''||$self.val()==null){
	            	if(typeof(param.disabled)=='undefined'){
		            	$dependant.val('');
		                $dependant.parent().parent().css('display','none');
	            	}else if(typeof(param.disabled)!='undefined'){
	            		if(key=='interval'){ //reset interval to 1 hour
		            		$dependant.val(3600);
		            	}
		                $dependant.attr('disabled','disabled');
	            	}
	            }
	            else{
	            	if(typeof(param.url)!='undefined'){
			            $dependant.empty();
			            $dependant.trigger('change');
		            	socket.get(param.url,{id:$self.val()},function(dependant_data_set){
		                    if(dependant_data_set.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
		                        location.reload(); // Will boot back to login screen
		                    }
		                    $dependant.parent().parent().css('display','block');
		                    var htmlappend = '<option value="" >&ltAll&gt</option>';
		                    for(var i=0; i<dependant_data_set.length; i++){
		                        htmlappend += '<option value="'+dependant_data_set[i].id+'" >'+dependant_data_set[i].name+'</option>'
		                    }
		                    $dependant.append(htmlappend);
		                    $dependant.data('combobox').refresh();
		                });
	            	}else{// if(typeof(param.source)!='undefined'){
		            	if(typeof(param.disabled)=='undefined'){
	                    	$dependant.parent().parent().css('display','block');
		            	}else if(typeof(param.disabled)!='undefined'){
			                $dependant.removeAttr('disabled');
		            	}
	            	}
	            }
			});

            
        });
        // If the page was loaded with the search field value populated through from the search box on all pages- automatically trigger running the report
	    if($('#search_field').length>0&&$('#search_field').val()!=''){
	       runReport();
	    }
    }
    
    // This run report button handler prepares the report object, and requests serverside for the HTML generated from the report.
         //  It clears and reassembles the parameter values for the report.
         // based on the type of parameter, it assembles the structure for the report parameters.
         // At the top of this file, the report structure is visible in the current reports as examples
        // when serverside responds with the HTML, it is thrown in the reports DIV. The Save and Print buttons are then enabled
         
         function runReport(){
             $('.alert').remove();
             var report = getReportById(parseInt($('#reporttype').val()));
             $.each(report.parameters,function(key,param){
                 // param.value=$('#'+report.id).val();
                 if(report.parameters[key].type=='checkboxes'){
                     $.each(report.parameters[key].checkboxes,function(checkboxkey,checkboxparam){
                         if($('#'+checkboxkey).is(':checked')){
                             report.parameters[key].checkboxes[checkboxkey].value = 1;
                         }else{
                             report.parameters[key].checkboxes[checkboxkey].value = 0;
                         }
                     });
                 }else{
                 	 if(typeof($('#'+key).parent().data('datetimepicker'))!='undefined'){
                 	 	report.parameters[key].value = $('#'+key).parent().data('datetimepicker').getLocalDate().toISOString();
                 	 		//report.parameters[key].value = dateFromlocalISO($('#'+key).val()).toISOString();
                 	 }else{
                     	report.parameters[key].value = $('#'+key).val();
                     }
                     delete report.parameters[key].text;
                     if($('#'+key+' option[value='+parseInt($('#'+key).val())+']').length>0){
                         report.parameters[key].text = $('#'+key+' option[value='+$('#'+key).val()+']').text();
                     }
                 }

             });

             if(typeof(report.parameters)!='undefined'&&typeof(report.parameters.start_time)!='undefined'&&typeof(report.parameters.end_time)!='undefined'&&report.parameters.start_time.value>report.parameters.end_time.value){
                 $('.page-banner').after('<div class="alert alert-error" style="border-radius:0px;">'+
                         '<button type="button" class="close" data-dismiss="alert">×</button>'+
                         '<strong><%= i18n(req,'Error')%>:&nbsp</strong><%= i18n(req,'DateOrderError')%></div>');
                 return;
             }
             
             if(report.id==3){  //Limits on Interval Report
             	var period = (new Date(report.parameters.end_time.value)) - (new Date(report.parameters.start_time.value)); //milliseconds
             	var numPeriods = Math.floor((period/1000)/parseInt($('#interval').val()))+1; 
             	var totalRecordsPerChart = ($('#eqp_id').val()==''?$('#eqp_id option').size():1)*numPeriods;
             	
             	if(totalRecordsPerChart>maxRecords){
             		var message = 'This report would have returned more than '+maxRecords+' rows.  You might want to constrain the time range to '+secondsToStringRoundDaysHours(parseInt(period*(maxRecords/totalRecordsPerChart)/1000))+'.';
              		$('.page-banner').after('<div class="alert alert-error" style="border-radius:0px;">'+
		                        '<button type="button" class="close" data-dismiss="alert">×</button>'+
		                        ''+message+'</div>');
	                	$('.main-content')[0].scrollTop=0;
                	return;
             	}
             	
             	
             }
             
             
             // We're a GO at this point for running the report.
             $('#promptprint').css('display','block');
             $('#savemodalbtn').css('display','block');


             $('#runreportcog').css('display','inline-block');
             $('#reportcogspace').css('display','inline-block');


             $('#report-header-name').html(report.name.locale_label['<%=req.session.user.locale%>']);

             report.system_name = system_name; // saves the system name
             report.timezoneoffset = new Date().getTimezoneOffset();

             $('#iframediv').css('visibility','hidden');
             $.post('/reports/view', {report:report,css:$('#styling').val()}, function(report){
                //alert('report');
                 $('#iframediv').empty();
                 $('#iframediv').html(report);
                 $('#iframediv .stripcss').remove();
                 $('#promptprint').css('display','block');
                 $('#runreportcog').css('display','none');
                 $('#reportcogspace').css('display','none');
                 setTimeout(function(){

                     $('#iframediv').css('visibility','visible');
                 },100);
             });
         }

    // binds changes to the report type to rebuild the parameters
    
    $('#reporttype').change(function(){
        rebuildParams();
    });

    /// utility functions:



    function getReportById(id){
        for(var i=0; i<reports.length;i++){
            if(reports[i].id ==id){
                return reports[i];
            }
        }
    }

    function getPrinterById(id){
        for(var i=0; i<printers.length;i++){
            if(printers[i].id ==id){
                return printers[i];
            }
        }
    }
    
</script>

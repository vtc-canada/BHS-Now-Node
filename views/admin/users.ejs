<%
    var translate = {
        'en' : {
            'Users Administration':'Users Administration',
            'Users':'Users',
            'Save':'Save',
            'New User':'New User',
            'Changes Pending.':'Changes Pending.',
            'Username':'Username',
            'Security Level':'Security Level',
            'Save Dialog':'Save Dialog',
            'Cancel':'Cancel',
            'Confirm':'Confirm',
            'Change Password':'Password',
            'New Password':'New Password',
            'Confirm Password':'Confirm Password',
            'Set':'Set',
            'To create a new user, fill out the account information and select a security level.':'To create a new user, fill out the account information and select a security level.',
            'Account Information':'Account Information',
            'Password':'Password',
            'Password fields do not match.':'Password fields do not match.',
            'The username':'The username',
            'Please enter a value for Username.':'Please enter a value for Username.',
            'is already in use.':'is already in use.',
            'Password must be at least 1 character long.':'Password must be at least 1 character long.',
            'You are about to delete the following user(s)':'You are about to delete the following user(s)',
            'All messages associated with the user(s) will be deleted.':'',
            'Are you sure you would like to make these changes?':'Are you sure you would like to make these changes?',
            'Operator':'Operator',
            'Admin':'Admin',
            'Manager':'Manager',
            'View Only':'View Only',
            'Delete':'Delete',
            'Please enter a new password for':'Please enter a new password for' ,
            'Group':'Group',
            'Username already Taken':'Username already Taken',
            'Error':'Error'
            ,'Locked':'Locked'
            ,'Unlocked':'Unlocked'
        },
        'es' : {
            'Users Administration':'Users Administration',
            'Users':'Users',
            'Save':'Save',
            'New User':'New User',
            'Changes Pending.':'Changes Pending.',
            'Username':'Username',
            'Security Level':'Security Level',
            'Save Dialog':'Save Dialog',
            'Cancel':'Cancel',
            'Confirm':'Confirm',
            'Change Password':'Password',
            'New Password':'New Password',
            'Confirm Password':'Confirm Password',
            'Set':'Set',
            'To create a new user, fill out the account information and select a security level.':'To create a new user, fill out the account information and select a security level.',
            'Account Information':'Account Information',
            'Password':'Password',
            'Password fields do not match.':'Password fields do not match.',
            'The username':'The username',
            'Please enter a value for Username.':'Please enter a value for Username.',
            'is already in use.':'is already in use.',
            'Password must be at least 1 character long.':'Password must be at least 1 character long.',
            'You are about to delete the following user(s)':'You are about to delete the following user(s)',
            'All messages associated with the user(s) will be deleted.':'',
            'Are you sure you would like to make these changes?':'Are you sure you would like to make these changes?',
            'Operator':'Operator',
            'Admin':'Admin',
            'Manager':'Manager',
            'View Only':'View Only',
            'Delete':'Delete' ,
            'Please enter a new password for':'Please enter a new password for'  ,
            'Group':'Group'               ,
            'Username already Taken':'Username already Taken',
            'Error':'Error'
            ,'Locked':'Locked'
            ,'Unlocked':'Unlocked'
        }
    }
%>

<div class="row-fluid page-banner">
    <div class="banner-div"><i class="icon-group icon-1x banner-icon-top"></i><div class="banner-div-text"><%= translate[locale]['Users Administration'] %></div></div>
</div>

 <!-- The Main page Users Section -->
<div class="row-fluid" style="margin-top:20px; margin-bottom:35px;">
    <div class="span10 offset1 page-controls-wrapper">
        <div class="row-fluid" id="reportheader"><span style="padding-left:10px;"><%= translate[locale]['Users'] %></span>

            <button style="margin-right:10px;font-weight: 400;" class="btn btn-primary pull-right save_pull" id="save_users"><%= translate[locale]['Save'] %></button>

            <div style="margin-right:10px;font-weight: 400;" class="btn btn-primary pull-right save_pull" id="add_user"><%= translate[locale]['New User'] %></div>
            <div style="margin-right:10px; color:#990000; font-weight: 400; display:none;" class="pull-right save_pull" id="changes_pending">Changes Pending. &nbsp</div>
        </div>
        <div class="row-fluid" id="iframediv">
            <div class="row-fluid">
                <div class="adminusersheader">
                    <div class="row-fluid rowflu">
                        <!--<div class="span1 offset1">ID</div>-->
                        <div class="span2 offset1"><%= translate[locale]['Username'] %></div>
                        <div style="" class="span2"><%= translate[locale]['Security Level'] %></div>
                        <div style="" class="span2"></div>
                        <div class="span3"></div>
                        <div class="span2"></div>
                    </div>
                </div>
                <div id="adminusers"></div>

            </div>
        </div>
    </div>

    <!-- Modal - confirms you want to continue to delete users and complete other changes -->
    <div id="saveModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabelsave"><%= translate[locale]['Save Dialog'] %></h3>
        </div>
        <div class="modal-body">
            <p>One fine body…</p>
        </div>
        <div class="modal-footer">
            <button class="btn" data-dismiss="modal" aria-hidden="true"><%= translate[locale]['Cancel'] %></button>
            <button class="btn btn-primary" data-dismiss="modal" aria-hidden="true" id="confirmdeletes"><%= translate[locale]['Confirm'] %></button>
        </div>
    </div>


    <!-- Modal  for changing password-->
    <div id="changeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabelChange"><%= translate[locale]['Change Password'] %></h3>
        </div>
        <div class="modal-body">
            <div class="row-fluid"><p id="newpasswordprompt"></p></div>
            <div class="row-fluid"><label class="change-label" for="newpassword"><%= translate[locale]['New Password'] %>:</label><input class="change-input" id="newpassword" type="password"></div>
            <div class="row-fluid"><label class="change-label" for="confirmpassword"><%= translate[locale]['Confirm Password'] %>:</label><input class="change-input"  id="confirmpassword" type="password"> </div>
        </div>
        <div class="modal-footer">
            <button class="btn" data-dismiss="modal" aria-hidden="true"><%= translate[locale]['Cancel'] %></button>
            <button class="btn btn-primary" id="confirmchange"><%= translate[locale]['Set'] %></button>
        </div>
    </div>

    <!-- Modal  for creating new user -->
    <div id="addUserModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabelAdd">New User</h3>
        </div>
        <div class="modal-body">
            <div class="row-fluid"><p><%= translate[locale]['To create a new user, fill out the account information and select a security level.'] %></p></div>
            <h4><%= translate[locale]['Account Information'] %></h4>
            <div class="row-fluid"><label class="change-label" for="addnewusername"><%= translate[locale]['Username'] %>:</label><input class="change-input" id="addnewusername" type="text"></div>

            <div class="row-fluid"><label class="change-label" for="newpassword"><%= translate[locale]['Password'] %>:</label><input class="change-input" id="addnewpassword" type="password"></div>
            <div class="row-fluid"><label class="change-label" for="confirmpassword"><%= translate[locale]['Confirm Password'] %>:</label><input class="change-input"  id="addconfirmpassword" type="password"> </div>
            <h4><%= translate[locale]['Security Level'] %></h4>
            <div class="row-fluid"><label class="change-label" for="newsecuritylevel"><%= translate[locale]['Group'] %>:</label>
                <select class="securityselect security-select-new change-input" style="margin-top:0px; height:30px;" id="newsecuritylevel">
                	<% for(var i=0;i<securityGroups.length;i++){ %>
                    	<option value="<%=securityGroups[i].name%>"><%=(securityGroups[i].name=='ReadOnly'?'Read Only':securityGroups[i].name)%></option>
                	<% } %>
                </select>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn" data-dismiss="modal" aria-hidden="true"><%= translate[locale]['Cancel'] %></button>
            <button class="btn btn-primary" id="confirmadduser"><%= translate[locale]['Set'] %></button>
        </div>
    </div>

</div>



<!-- Admin Users Template - -->
<script type="text/template" id="adminuserlist-template">
    
    <div class="row-fluid {{ if(typeof(dodelete)!='undefined'){ }}user-delete{{ } }}" userid="{{= id}}">
        <div class="span2 offset1"><span class="mobilelabel"><%= translate[locale]['Username'] %>:</span> {{= username }}</div>
        <div class="span2"><span class="mobilelabel"><%= translate[locale]['Security Level'] %>:</span>
            
            
		{{if(username=='<%=req.session.user.username%>'){ }}
			<% for(var i=0;i<securityGroups.length;i++){ %>
	            	{{ if(<%= securityGroups[i].name %>){ }}<%=(securityGroups[i].name=='ReadOnly'?'Read Only':securityGroups[i].name)%>{{ } }}
			<% } %>
		{{ }else{ }}
					<select class="securityselect">
			<% for(var i=0;i<securityGroups.length;i++){ %>
                		<option value="<%= securityGroups[i].name %>"{{ if(<%= securityGroups[i].name %>){ }} selected="selected"{{ } }}><%=(securityGroups[i].name=='ReadOnly'?'Read Only':securityGroups[i].name)%></option>
			<% } %>					
			</select>
    	{{ } }}
            
        </div>
        <div class="span2 user-changepassword-span">
		{{if(username!='<%=req.session.user.username%>'){ }}
        <div class="pull-right toggle-active btn btn-{{ if(active==1){ }}primary{{ }else{ }}danger{{ } }}">{{ if(active==1){ }}<%= translate[locale]['Unlocked'] %>{{ }else{ }}<%= translate[locale]['Locked'] %>{{ } }}</div>
        {{ } }}
        </div>
        <div class="span3 user-changepassword-span"><div class="pull-right change-password btn btn-primary"><%= translate[locale]['Change Password'] %>{{ if(typeof(dopassword)!='undefined'){ }} <i class="icon-time"></i>{{ } }}</div></div>
        <div class="span2 user-delete-span">
        {{if(username!='<%=req.session.user.username%>'){ }}
		<div class="pull-right deleteadminuser btn {{ if(typeof(dodelete)!='undefined'){ }}btn-success{{ }else{ }}btn-danger{{ } }}">{{ if(typeof(dodelete)!='undefined'){ }}<%= translate[locale]['Cancel'] %>{{ }else{ }}<%= translate[locale]['Delete'] %>{{ } }}</div>
		{{ } }}
		</div>
    </div>
</script>

<!-- New Admin User Template - Different outer div template attributes -->
<script type="text/template" id="new-adminuserlist-template">
    <div class="row-fluid new-user" userid="new" newid="{{= newid }}">
        <div class="span2 offset1"><span class="mobilelabel"><%= translate[locale]['Username'] %>:</span> {{= username }}</div>
        <div class="span2 admin-users-checkbox"><span class="mobilelabel"><%= translate[locale]['Security Level'] %>:</span>
            <select class="securityselect">
                <% for(var i=0;i<securityGroups.length;i++){ %>
                <option value="<%= securityGroups[i].name %>"{{ if(<%= securityGroups[i].name %>){ }} selected="selected"{{ } }}><%=(securityGroups[i].name=='ReadOnly'?'Read Only':securityGroups[i].name)%></option>
                <% } %>
            </select>
        </div>
        <div class="span2 user-changepassword-span"><div class="pull-right toggle-active btn btn-{{ if(active==1){ }}primary{{ }else{ }}danger{{ } }}">{{ if(active==1){ }}<%= translate[locale]['Unlocked'] %>{{ }else{ }}<%= translate[locale]['Locked'] %>{{ } }}</div></div>
        <div class="span3 user-changepassword-span"><div class="pull-right change-password btn btn-primary"><%= translate[locale]['Change Password'] %>{{ if(typeof(dopassword)!='undefined'){ }} <i class="icon-time"></i>{{ } }}</div></div>
        <div class="span2 user-delete-span"><div class="pull-right deleteadminuser btn {{ if(typeof(dodelete)!='undefined'){ }}btn-success{{ }else{ }}btn-danger{{ } }}">{{ if(typeof(dodelete)!='undefined'){ }}<%= translate[locale]['Cancel'] %>{{ }else{ }}<%= translate[locale]['Delete'] %>{{ } }}</div></div>
    </div>
</script>


<div class="isn-content-footer">
	<hr class="isn-footer-hr">
	<div class="isn-margin-footer-wrapper">
		<div class="isn-footer-image">
			Powered By 
			<img alt="iSystemsNow" class="logo isn-logo" src="/img/iSystemsNow-Logo-RGB-Black.png">'s Now Management Studio. 
		</div>
	</div>
</div>


<script>
var translate = {
    'en':{
        'Success':'Success',
        'SuccessMessage':'Changes have been saved.'
    },
    'es':{
        'Success':'Success',
        'SuccessMessage':'Changes have been saved.'
    }
}
$(document).ready(function(){

    ///////////////////////////////////////
    /////   AdminUsers ////////////////////
    ///////////////////////////////////////
    /// Similar to users on the layout.ejs page
    // Almost the same information
    // triggered and updated seperately from users
    // ie. adminusers ignores 'dialhome' updates about users last being logged in
    //
    // we create the collection, instantiate it, fetch it.
    // the view is subsequently created after the first set is retreived.
    // the view is also rendered when any updates come in.
    var AdminUsersModel = Backbone.Model.extend({
        urlRoot: '/users'
    });

    var SailsAdminUsersCollection = Backbone.Collection.extend({
        sailsCollection: "",
        socket: null,
        sync: function(method, model, options){
            var where = {};
            if (options.where) {
                where = {
                    where: options.where
                }
            }
            if(typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                this.socket = socket;
                this.socket.request("/" + this.sailsCollection, where, _.bind(function(usersmsg){
                    if(usersmsg.error != undefined){  // USER NO LONGER LOGGED IN!!!!!
                        location.reload(); // Will boot back to login screen
                    }
                    this.set(usersmsg);
                    adminusersView = new AdminUsersView({collection: adminusers});
                }, this));
            }
        }
    });

    var AdminUsersCollection = SailsAdminUsersCollection.extend({
        sailsCollection: 'admin/usersjoinedpolicies',
        model: AdminUsersModel
    });

    adminusers = new AdminUsersCollection();
    adminusers.fetch();











    ////////////////////////
    /// AdminUsers View ////
    ////////////////////////
    //
    //  clicking change password, changing groups, etc. add 'dosync' and 'dodelete', 'dopassword' flags to the models
    //  these flags are used when determining how to handle each model when SAVING the entire changes

    var AdminUsersView = Backbone.View.extend({
        el: '#adminusers',
        events: {
            "change select.securityselect"   : "changeSecurity",
            "click div.deleteadminuser"   : "deleteUser",
            "click div.change-password" : "changePassword"
            ,"click div.toggle-active" : "toggleActive"

        },
        toggleActive:function(event){
        	var newidtemp = '';
            var idstring = $(event.currentTarget).parent().parent().attr('userid');
            var modtemp;
            if(idstring=='new'){
                newidtemp = $(event.currentTarget).parent().parent().attr('newid');
                modtemp  = this.collection.findWhere({newid:parseInt(newidtemp)});
            }else{
                modtemp  = this.collection.get(idstring);
            }
            modtemp.set({active:modtemp.get('active')==1?0:1});
            modtemp.set({dosync:1});
            setChangesPending();
            adminusersView.render();
        },
        // Clears the password modal
        // passes in the userid / new user flag
        // shows the modal
        changePassword:function(event){

            var newidtemp = '';
            var idstring = $(event.currentTarget).parent().parent().attr('userid');
            var modtemp;
            if(idstring=='new'){
                newidtemp = $(event.currentTarget).parent().parent().attr('newid');
                modtemp  = this.collection.findWhere({newid:parseInt(newidtemp)});
            }else{
                modtemp  = this.collection.get(idstring);
            }

            if(idstring =='new'){
                $('#changeModal').attr('userid','new');
                $('#changeModal').attr('newid',newidtemp);
            }
            else
            {
                $('#changeModal').attr('userid',idstring);
            }

            $('#newpasswordprompt').html('<%= translate[locale]['Please enter a new password for'] %> <b>'+modtemp.get('username')+'</b>.');
            $('#newpassword').val('');
            $('#confirmpassword').val('');
            $('#changeModal div.alert-error').remove();
            $('#changeModal').modal('show');
        },
        // deletes the model from the collection if the user is new,
        // if the user has an id, it sets the 'dodelete' flag, and makes the row transparent-like
        deleteUser:function(event){
            var newidtemp = '';
            var idstring = $(event.currentTarget).parent().parent().attr('userid');
            var modtemp;
            if(idstring=='new'){
                newidtemp = $(event.currentTarget).parent().parent().attr('newid');
                modtemp  = this.collection.findWhere({newid:parseInt(newidtemp)});
                adminusers.remove(modtemp);
                adminusersView.render();
                return;
            }else{
                modtemp  = this.collection.get(idstring);
            }

            if(typeof(modtemp.get('dodelete'))=='undefined'){
                modtemp.set({dodelete:1});
                $('#adminusers > div[userid='+idstring+'] > div > div.deleteadminuser').removeClass('btn-danger').addClass('btn-success').html('<%= translate[locale]['Cancel'] %>');
                $('#adminusers > div[userid='+idstring+']').removeClass('user-delete').addClass('user-delete');
            }else{
                modtemp.unset('dodelete');
                $('#adminusers > div[userid='+idstring+'] > div > div.deleteadminuser').removeClass('btn-success').addClass('btn-danger').html('<%= translate[locale]['Delete'] %>');
                $('#adminusers > div[userid='+idstring+']').removeClass('user-delete');
            }
            setChangesPending();
        },
        // changes the modal, and sets the 'dosync' flag
        changeSecurity:function(event){
            var idstring = $(event.currentTarget).parent().parent().attr('userid');
            var modtemp;
            if(idstring=='new'){
                modtemp  = this.collection.findWhere({newid:parseInt($(event.currentTarget).parent().parent().attr('newid'))});
            }else{
                modtemp  = this.collection.get(idstring);
            }
            modtemp.set({dosync:1});
            $(event.currentTarget).children().each(function(i){
            	modtemp.set($(this).val(),0);
            });
        	modtemp.set($(event.currentTarget).val(),1);
            
            setChangesPending();
        },
        initialize: function () {
            this.render();
        },
        template: _.template($('#adminuserlist-template').html()), //$('#userlist-template').html()),
        newusertemplate:  _.template($('#new-adminuserlist-template').html()),
        render: function () {
            this.$el.html("");

            // sorts by username
            var tcollection = this.collection.sortBy(function(message){
                return message.get("username").toString().toUpperCase();
            });

            for(var i=0; i<tcollection.length; i++)
            {
            	if(tcollection[i].get('username')=='isnadmin'){
            		continue;
            	}
                if(!tcollection[i].isNew()){
                    this.$el.append(this.template(tcollection[i].toJSON()));
                }else{
                    this.$el.append(this.newusertemplate(tcollection[i].toJSON()));
                }
            }
            $('#adminusers > div.row-fluid:even').addClass('odd');
            $('#adminusers > div.row-fluid:odd').addClass('even');

            setChangesPending();  // recalculates and displays if changes are pending
        }
    });
    var adminusersView;


    // this object keeps track of the number of successful changes that happen out of all the changes
    // this is iteratively updated as the .save() function is called on each of the models in the collection
    // it displays a success message if it completes all the required saves
    saveObj = {
        changetotal:0,
        changecount:0,
        addcount:function(){
            this.changecount++;
            if(this.changecount>=this.changetotal){
                $('.alert-success').remove();
                $('.page-banner').after('<div class="alert alert-success fade in" style="border-radius:0px;">'+
                        '<button type="button" class="close" data-dismiss="alert">×</button>'+
                        '<strong>'+translate['<%= locale %>']['Success']+':&nbsp</strong>'+translate['<%= locale %>']['SuccessMessage']+'</div>');
                setTimeout(function(){
                    setTimeout(function(){
                        $('.alert-success').remove();
                    },500);
                    $('.alert-success').removeClass('in');
                },alert_fadeout_time);
                setTimeout(function(){
                    //
                    adminusers.fetch();
                    //adminusers.reset();
                    adminusersView = new AdminUsersView({collection: adminusers});
                    //adminusers.sync();
                },100);
            }
        }
    }

    // save password change event is attached to the button
    // it sets the dopassword and dosync flags on the model
    $('#confirmchange').click(function(event){
        $('#changeModal div.alert-error').remove();
        if($('#newpassword').val()!=$('#confirmpassword').val()){
            $('#changeModal div.modal-header').after(
                    '<div class="alert alert-error fade in" style="margin-bottom:0px;" style="border-radius:0px;"><button type="button" class="close" data-dismiss="alert">×</button><strong><%= translate[locale]['Error'] %>:&nbsp;</strong><%= translate[locale]['Password fields do not match.'] %></div>');
        }else if($('#newpassword').val()==''){
            $('#changeModal div.modal-header').after(
                    '<div class="alert alert-error fade in" style="margin-bottom:0px;" style="border-radius:0px;"><button type="button" class="close" data-dismiss="alert">×</button><strong><%= translate[locale]['Error'] %>:&nbsp;</strong><%= translate[locale]['Password must be at least 1 character long.'] %></div>');
        }else{
            var newidtemp = '';
            var idstring = $(event.currentTarget).parent().parent().attr('userid');
            if(idstring=='new'){
                newidtemp = $(event.currentTarget).parent().parent().attr('newid');
                adminusers.findWhere({newid:parseInt(newidtemp)}).set({password:$('#newpassword').val(),dosync:1,dopassword:1});
                $('#adminusers > div[userid='+idstring+'] div.user-changepassword-span div.change-password').html('<%= translate[locale]['Change Password'] %> <i class="icon-time"></i>');
            }else{
                adminusers.get(idstring).set({password:$('#newpassword').val(),dosync:1,dopassword:1});
                $('#adminusers > div[userid='+idstring+'] div.user-changepassword-span div.change-password').html('<%= translate[locale]['Change Password'] %> <i class="icon-time"></i>');
            }
            $('#changeModal').modal('hide');
            setChangesPending();


        }
    });

    // binds saveChanges function to Deletes confirmation dialog.
    $('#confirmdeletes').click(function(event){
        saveChanges();
    });


    // This function iteratively goes through all the models in the adminusers collection
    // if it's new, it creates it,
    // if it's being deleted, it deletes it
    // if we're changing the password, we do that
    // if we are just updating security level, we simply call model.save().
    // each successful response results in a  saveObj.addcount() -  once this hits 100%, the success message pops.
    function saveChanges(){
        _.chain(adminusers.models).clone().each(function(model){
            if(model.isNew()){
                model.save();
                saveObj.addcount();
            }
            else
            {
                if(typeof(model.get('dodelete'))!='undefined'){   // Just save the ones we've interacted with :D
                    model.unset('dodelete');
                    model.unset('dopassword');
                    model.unset('dosync');
                    model.destroy();
                    saveObj.addcount();

                }else if(typeof(model.get('dopassword'))!='undefined'){
                    model.unset('dosync');
                    model.unset('dopassword');
                    model.save();
                    saveObj.addcount();
                }
                else if(typeof(model.get('dosync'))!='undefined'){   // Just save the ones we've interacted with :D
                    model.unset('dosync');
                    model.save();
                    saveObj.addcount();
                }
            }
        });
    }

     // pops the add new user dialog.
    $('#add_user').click(function(event){
        $('#addnewusername').val('');
        $('#newsecuritylevel').val('operator');
        $('#addnewpassword').val('');
        $('#addconfirmpassword').val('');
        //$('#addUserModal div.modal-body .error-message').html('');
        $('#addUserModal div.alert-error').remove();
        $('#addUserModal').modal('show');

    });

    // this makes sure the new user has a propper username and password.
    // it adds it to the collection if it's successful.
    $('#confirmadduser').click(function(event){
        $('#addUserModal div.alert-error').remove();

        if($('#addnewusername').val()==''){
            $('#addUserModal div.modal-header').after(
                    '<div class="alert alert-error fade in" style="margin-bottom:0px;" style="border-radius:0px;"><button type="button" class="close" data-dismiss="alert">×</button><strong><%= translate[locale]['Error'] %>:&nbsp;</strong><%= translate[locale]['Please enter a value for Username.'] %></div>');
            return;
        }

        socket.request('/admin/checkusername',{username:$('#addnewusername').val()},function(data){
            if(typeof(data.error)!='undefined'){
                location.reload(); // Will boot back to login screen
                return;
            }
            if(typeof(data.taken)!='undefined'){ //if username was already taken
                $('#addUserModal div.modal-header').after(
                        '<div class="alert alert-error fade in" style="margin-bottom:0px;" style="border-radius:0px;"><button type="button" class="close" data-dismiss="alert">×</button><strong><%= translate[locale]['Error'] %>:&nbsp;</strong><%= translate[locale]['The username'] %> <b>'+$('#addnewusername').val()+'</b> <%= translate[locale]['is already in use.'] %></div>');
                return;
            }
            if(typeof(adminusers.findWhere({username:$('#addnewusername').val()}))!='undefined'){
                $('#addUserModal div.modal-header').after(
                        '<div class="alert alert-error fade in" style="margin-bottom:0px;" style="border-radius:0px;"><button type="button" class="close" data-dismiss="alert">×</button><strong><%= translate[locale]['Error'] %>:&nbsp;</strong><%= translate[locale]['The username'] %> <b>'+$('#addnewusername').val()+'</b> <%= translate[locale]['is already in use.'] %></div>');
                return;
            }
            if($('#addnewpassword').val()!=$('#addconfirmpassword').val()){
                $('#addUserModal div.modal-header').after(
                        '<div class="alert alert-error fade in" style="margin-bottom:0px;" style="border-radius:0px;"><button type="button" class="close" data-dismiss="alert">×</button><strong>:&nbsp;</strong><%= translate[locale]['Password fields do not match.'] %></div>');
                return;
            }
            if($('#addnewpassword').val()==''){
                $('#addUserModal div.modal-header').after(
                        '<div class="alert alert-error fade in" style="margin-bottom:0px;" style="border-radius:0px;"><button type="button" class="close" data-dismiss="alert">×</button><strong><%= translate[locale]['Error'] %>:&nbsp;</strong><%= translate[locale]['Password must be at least 1 character long.'] %></div>');
                return;
            }
            var newUser = {username:$('#addnewusername').val(),dosync:1, active:1, newid:Math.floor(Math.random()*65535),password:$('#addnewpassword').val()};

            $('#newsecuritylevel option').each(function(){
                if($(this).val()==$('#newsecuritylevel').val()){
                    newUser[$(this).val()]=1;
                }else{
                    newUser[$(this).val()]=0;
                }
            });

            adminusers.add(newUser);
            $('#addUserModal').modal('hide');
            adminusersView.render();


        });

    });


    // this initial click on save users sets up the saveObj to track all the successes it will need.
    // it pops the delete modal confirmation if we're wanting to delete users.
    $('#save_users').click(function(event){

        var changecount = 0;
        var deleteusersstring = '';
        $.each(adminusers.models,function(key,model){
            if(typeof(model.get('dodelete'))!='undefined'||typeof(model.get('dosync'))!='undefined'){
                changecount++;
                if(typeof(model.get('dodelete'))!='undefined'){
                     deleteusersstring+=model.get('username')+', ';
                }
            }
        });
        saveObj.changetotal =  changecount;
        saveObj.changecount = 0;


        if(deleteusersstring!=''){
            deleteusersstring = deleteusersstring.substring(0,deleteusersstring.length-2);
            $('#myModalLabelsave').html('Modify User Accounts');
            $('#saveModal > div.modal-body').html('<p><%= translate[locale]['You are about to delete the following user(s)'] %>: <b>'+deleteusersstring+'</b>. <%= translate[locale]['All messages associated with the user(s) will be deleted.'] %></p><p><%= translate[locale]['Are you sure you would like to make these changes?'] %></p>');
            $('#saveModal').modal('show');
        }
        else{
            saveChanges();
        }

    });

	$(window).on("beforeunload", function() {
		if(isChangesPending())
		{
	    	return unloadMessage;
		}
	});

	function isChangesPending(){
        var change = false;
        $.each(adminusers.models,function(key,model){
            if(model.isNew()||typeof(model.get('dodelete'))!='undefined'||typeof(model.get('dosync'))!='undefined'){
               change= true;
               return;
            }
        });
		return change;
	}

    // just shows the changes are pending, by scanning through the collection to see if that's the case.
    function setChangesPending(){
        var change = false;
        $.each(adminusers.models,function(key,model){
            if(model.isNew()||typeof(model.get('dodelete'))!='undefined'||typeof(model.get('dosync'))!='undefined'){
               change= true;
               return;
            }
        });
        $('#save_users')[0].disabled = !change;
        if(change){
            $('#changes_pending').css('display','block');
        }
        else{
            $('#changes_pending').css('display','none');
        }
    }




});

</script>
